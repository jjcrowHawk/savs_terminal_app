import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'sqfEntityBase.dart';
import 'DBModel.dart';

/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import Vivienda.dart into where to use
      - start typing Vivienda().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(vivienda) / or toList(viviendaList)
      - you can select one Vivienda or List<Vivienda> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Vivienda
class Vivienda {
  // FIELDS
  int id;
  String inspeccion_id;
  int edad_construccion;
  double elevacion;
  String sector;
  String direccion;
  String ubicacion;
  bool isDeleted;
  // end FIELDS


// COLLECTIONS
  getFichas(VoidCallback fichaList(List<Ficha> o)) {
    Ficha().select().ViviendaId.equals(id).toList((objList) {
      fichaList(objList);
    });
  }
  // END COLLECTIONS

  static const bool _softDeleteActivated=true;
  ViviendaManager __mnVivienda;
  ViviendaFilterBuilder _select;

  ViviendaManager get _mnVivienda {
    if (__mnVivienda == null) __mnVivienda = new ViviendaManager();
    return __mnVivienda;
  }

  Vivienda({this.id, this.inspeccion_id,this.edad_construccion,this.elevacion,this.sector,this.direccion,this.ubicacion,this.isDeleted}) { setDefaultValues();}
  Vivienda.withFields(this.inspeccion_id,this.edad_construccion,this.elevacion,this.sector,this.direccion,this.ubicacion,this.isDeleted){ setDefaultValues();}
  Vivienda.withId(this.id, this.inspeccion_id,this.edad_construccion,this.elevacion,this.sector,this.direccion,this.ubicacion,this.isDeleted){ setDefaultValues();}

  // methods
  Map<String, dynamic> toMap({bool forQuery=false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;    if (inspeccion_id != null) map["inspeccion_id"] = inspeccion_id;
    if (edad_construccion != null) map["edad_construccion"] = edad_construccion;
    if (elevacion != null) map["elevacion"] = elevacion;
    if (sector != null) map["sector"] = sector;
    if (direccion != null) map["direccion"] = direccion;
    if (ubicacion != null) map["ubicacion"] = ubicacion;
    if (isDeleted != null) map["isDeleted"] = forQuery? (isDeleted ? 1 : 0):isDeleted;

    return map;
  }

  Vivienda.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.inspeccion_id = o["inspeccion_id"];
    this.edad_construccion = o["edad_construccion"];
    this.elevacion = o["elevacion"];
    this.sector = o["sector"];
    this.direccion = o["direccion"];
    this.ubicacion= o["ubicacion"];
    this.isDeleted = o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return[id,inspeccion_id,edad_construccion,elevacion,sector,direccion,ubicacion,isDeleted];
  }


  static fromWebUrl(String url, VoidCallback  viviendaList (List<Vivienda> o)) async {
    var objList = List<Vivienda>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((vivienda) => Vivienda.fromMap(vivienda)).toList();
        viviendaList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Vivienda.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Vivienda>> fromObjectList(Future<List<dynamic>> o) async {
    var viviendasList = new List<Vivienda>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        viviendasList.add(Vivienda.fromMap(data[i]));
      }
    });
    return viviendasList;
  }

  static List<Vivienda> fromMapList(List<Map<String, dynamic>> query) {
    List<Vivienda> viviendas = List<Vivienda>();
    for (Map map in query) {
      viviendas.add(Vivienda.fromMap(map));
    }
    return viviendas;
  }

  /// returns Vivienda by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Vivienda if exist, otherwise returns null</returns>
  getById(int id, VoidCallback vivienda(Vivienda o)){
    Vivienda viviendaObj;
    var viviendaFuture = _mnVivienda.getById(id);
    viviendaFuture.then((data) {
      if (data.length > 0)
        viviendaObj = Vivienda.fromMap(data[0]);
      else
        viviendaObj = null;
      vivienda(viviendaObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnVivienda.insert(
          Vivienda.withFields(inspeccion_id,edad_construccion,elevacion,sector,direccion,ubicacion,isDeleted));
    else
      id= await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Vivienda> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Vivienda> viviendas) async {
    var results = _mnVivienda.saveAll("INSERT OR REPLACE INTO Vivienda (id, inspeccion_id,edad_construccion,elevacion,sector,direccion,ubicacion,isDeleted)  VALUES (?,?,?,?,?,?,?,?)",viviendas);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnVivienda.rawInsert(
        "INSERT OR REPLACE INTO Vivienda (id, inspeccion_id,edad_construccion,elevacion,sector,direccion,ubicacion,isDeleted)  VALUES (?,?,?,?,?,?,?,?)", [id,inspeccion_id,edad_construccion,elevacion,sector,direccion,ubicacion,isDeleted]);
    return id;
  }


  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Vivienda> viviendas) async {
    var results = await _mnVivienda.rawInsertAll(
        "INSERT OR REPLACE INTO Vivienda (id, inspeccion_id,edad_construccion,elevacion,sector,direccion,ubicacion,isDeleted)  VALUES (?,?,?,?,?,?,?,?)", viviendas);
    return results;
  }


  /// <summary>
  /// saveAs Vivienda. Returns a new Primary Key value of Vivienda
  /// </summary>
  /// <returns>Returns a new Primary Key value of Vivienda</returns>
  Future<int> saveAs() async {
    id = await _mnVivienda.insert(
        Vivienda.withFields(inspeccion_id,edad_construccion,elevacion,sector,direccion,ubicacion,isDeleted));
    return id;
  }


  /// <summary>
  /// Deletes Vivienda
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Vivienda invoked (id=$id)");
    var result= BoolResult();  result = await Ficha().select().ViviendaId.equals(id).delete();
    if (!result.success) return result;
    else
    if (!_softDeleteActivated)
      return _mnVivienda.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnVivienda.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }
  /// <summary>
  /// Recover Product
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Vivienda invoked (id=$id)");var result= BoolResult();  result = await Ficha().select(getIsDeleted: true).isDeleted.equals(true).and.ViviendaId.equals(id).update({"isDeleted": 0});
    if (!result.success) return result;
    else  return _mnVivienda.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});  }
  //private ViviendaFilterBuilder _Select;
  ViviendaFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new ViviendaFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted==true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  ViviendaFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    ViviendaFilterBuilder _distinct = new ViviendaFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted==true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if(edad_construccion==null) edad_construccion=0;
    if(elevacion==null) elevacion=null;
    if(sector==null) sector="";
    if(direccion==null) direccion="";
    if(ubicacion==null) ubicacion="";
    if(isDeleted==null) isDeleted=false;
  }
//end methods
}
// endregion vivienda


// region ViviendaField
class ViviendaField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  ViviendaFilterBuilder viviendaFB;
  ViviendaField(ViviendaFilterBuilder fb) {
    param = new DbParameter();
    viviendaFB = fb;
  }

  ViviendaField get not {
    _waitingNot = " NOT ";
    return this;
  }

  ViviendaFilterBuilder equals(var pValue) {
    param.expression = "=";
    viviendaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, viviendaFB.parameters, param, SqlSyntax.EQuals,
        viviendaFB._addedBlocks)
        : setCriteria(pValue, viviendaFB.parameters, param, SqlSyntax.NotEQuals,
        viviendaFB._addedBlocks);
    _waitingNot = "";
    viviendaFB._addedBlocks.needEndBlock[viviendaFB._blockIndex] =
        viviendaFB._addedBlocks.retVal;
    return viviendaFB;
  }

  ViviendaFilterBuilder isNull() {
    viviendaFB._addedBlocks = setCriteria(
        0,
        viviendaFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        viviendaFB._addedBlocks);
    _waitingNot = "";
    viviendaFB._addedBlocks.needEndBlock[viviendaFB._blockIndex] =
        viviendaFB._addedBlocks.retVal;
    return viviendaFB;
  }

  ViviendaFilterBuilder contains(dynamic pValue) {
    viviendaFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        viviendaFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        viviendaFB._addedBlocks);
    _waitingNot = "";
    viviendaFB._addedBlocks.needEndBlock[viviendaFB._blockIndex] =
        viviendaFB._addedBlocks.retVal;
    return viviendaFB;
  }

  ViviendaFilterBuilder startsWith(dynamic pValue) {
    viviendaFB._addedBlocks = setCriteria(
        pValue + "%",
        viviendaFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        viviendaFB._addedBlocks);
    _waitingNot = "";
    viviendaFB._addedBlocks.needEndBlock[viviendaFB._blockIndex] =
        viviendaFB._addedBlocks.retVal;
    viviendaFB._addedBlocks.needEndBlock[viviendaFB._blockIndex] =
        viviendaFB._addedBlocks.retVal;
    return viviendaFB;
  }

  ViviendaFilterBuilder endsWith(dynamic pValue) {
    viviendaFB._addedBlocks = setCriteria(
        "%" + pValue,
        viviendaFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        viviendaFB._addedBlocks);
    _waitingNot = "";
    viviendaFB._addedBlocks.needEndBlock[viviendaFB._blockIndex] =
        viviendaFB._addedBlocks.retVal;
    return viviendaFB;
  }

  ViviendaFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      viviendaFB._addedBlocks = setCriteria(
          pFirst,
          viviendaFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          viviendaFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        viviendaFB._addedBlocks = setCriteria(pFirst, viviendaFB.parameters,
            param, SqlSyntax.LessThan, viviendaFB._addedBlocks);
      else
        viviendaFB._addedBlocks = setCriteria(pFirst, viviendaFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, viviendaFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        viviendaFB._addedBlocks = setCriteria(pLast, viviendaFB.parameters, param,
            SqlSyntax.GreaterThan, viviendaFB._addedBlocks);
      else
        viviendaFB._addedBlocks = setCriteria(pLast, viviendaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, viviendaFB._addedBlocks);
    }
    _waitingNot = "";
    viviendaFB._addedBlocks.needEndBlock[viviendaFB._blockIndex] =
        viviendaFB._addedBlocks.retVal;
    return viviendaFB;
  }

  ViviendaFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    viviendaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, viviendaFB.parameters, param,
        SqlSyntax.GreaterThan, viviendaFB._addedBlocks)
        : setCriteria(pValue, viviendaFB.parameters, param,
        SqlSyntax.LessThanOrEquals, viviendaFB._addedBlocks);
    _waitingNot = "";
    viviendaFB._addedBlocks.needEndBlock[viviendaFB._blockIndex] =
        viviendaFB._addedBlocks.retVal;
    return viviendaFB;
  }

  ViviendaFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    viviendaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, viviendaFB.parameters, param, SqlSyntax.LessThan,
        viviendaFB._addedBlocks)
        : setCriteria(pValue, viviendaFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, viviendaFB._addedBlocks);
    _waitingNot = "";
    viviendaFB._addedBlocks.needEndBlock[viviendaFB._blockIndex] =
        viviendaFB._addedBlocks.retVal;
    return viviendaFB;
  }

  ViviendaFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    viviendaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, viviendaFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, viviendaFB._addedBlocks)
        : setCriteria(pValue, viviendaFB.parameters, param, SqlSyntax.LessThan,
        viviendaFB._addedBlocks);
    _waitingNot = "";
    viviendaFB._addedBlocks.needEndBlock[viviendaFB._blockIndex] =
        viviendaFB._addedBlocks.retVal;
    return viviendaFB;
  }

  ViviendaFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    viviendaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, viviendaFB.parameters, param,
        SqlSyntax.LessThanOrEquals, viviendaFB._addedBlocks)
        : setCriteria(pValue, viviendaFB.parameters, param,
        SqlSyntax.GreaterThan, viviendaFB._addedBlocks);
    _waitingNot = "";
    viviendaFB._addedBlocks.needEndBlock[viviendaFB._blockIndex] =
        viviendaFB._addedBlocks.retVal;
    return viviendaFB;
  }

  ViviendaFilterBuilder inValues(var pValue) {
    viviendaFB._addedBlocks = setCriteria(
        pValue,
        viviendaFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        viviendaFB._addedBlocks);
    _waitingNot = "";
    viviendaFB._addedBlocks.needEndBlock[viviendaFB._blockIndex] =
        viviendaFB._addedBlocks.retVal;
    return viviendaFB;
  }
}
// endregion ViviendaField

// region ViviendaFilterBuilder
class ViviendaFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Vivienda _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  ViviendaFilterBuilder(Vivienda obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  ViviendaFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  ViviendaFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  ViviendaFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  ViviendaFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  ViviendaFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  ViviendaFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  ViviendaFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  ViviendaFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  ViviendaFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  ViviendaFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  ViviendaField setField(ViviendaField field, String colName, DbType dbtype) {
    field = new ViviendaField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  ViviendaField _id;
  ViviendaField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }
  ViviendaField _inspeccion_id;
  ViviendaField get inspeccion_id {
    _inspeccion_id = setField(_inspeccion_id, "inspeccion_id", DbType.text);
    return _inspeccion_id;
  }
  ViviendaField _edad_construccion;
  ViviendaField get edad_construccion {
    _edad_construccion = setField(_edad_construccion, "edad_construccion", DbType.integer);
    return _edad_construccion;
  }
  ViviendaField _elevacion;
  ViviendaField get elevacion {
    _elevacion = setField(_elevacion, "elevacion", DbType.real);
    return _elevacion;
  }
  ViviendaField _sector;
  ViviendaField get sector {
    _sector = setField(_sector, "sector", DbType.text);
    return _sector;
  }
  ViviendaField _direccion;
  ViviendaField get direccion {
    _direccion = setField(_direccion, "direccion", DbType.text);
    return _direccion;
  }
  ViviendaField _ubicacion;
  ViviendaField get ubicacion {
    _ubicacion = setField(_ubicacion, "ubicacion", DbType.text);
    return _ubicacion;
  }
  ViviendaField _isDeleted;
  ViviendaField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }


  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Vivienda._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }


  /// <summary>
  /// Deletes List<Vivienda> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r= BoolResult();    toListPrimaryKey((idList){
      Ficha().select().ViviendaId.inValues(idList).delete();
    }, false);

    if(Vivienda._softDeleteActivated)
      r = await _obj._mnVivienda.updateBatch(qparams,{"isDeleted":1});
    else
      r = await _obj._mnVivienda.delete(qparams);
    return r;
  }
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Vivienda batch invoked");      toListPrimaryKey((idList){
      Ficha().select(getIsDeleted: true).isDeleted.equals(true).and.ViviendaId.inValues(idList).update({"isDeleted": 0});
    }, false);
    return _obj._mnVivienda.updateBatch(qparams,{"isDeleted":0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnVivienda.updateBatch(qparams, values);
  }

  /// This method always returns ViviendaObj if exist, otherwise returns null
  /// <returns>List<Vivienda></returns>
  void toSingle(VoidCallback vivienda(Vivienda o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnVivienda.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        vivienda(Vivienda.fromMap(data[0]));
      else
        vivienda(null);
    });
  }


  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback viviendaCount (int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var viviendasFuture = await _obj._mnVivienda.toList(qparams);
    int count = viviendasFuture[0]["CNT"];
    viviendaCount (count);
    return BoolResult(success:count>0, successMessage: count>0? "toCount(): $count items found":"", errorMessage: count>0?"": "toCount(): no items found");
  }

  /// This method always returns List<Vivienda>.
  /// <returns>List<Vivienda></returns>
  void toList(VoidCallback viviendaList (List<Vivienda> o)) async {

    _buildParameters();

    var viviendasFuture = _obj._mnVivienda.toList(qparams);

    List<Vivienda> viviendasData = new List<Vivienda>();
    viviendasFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        viviendasData.add(Vivienda.fromMap(data[i]));
      }
      viviendaList (viviendasData);
      viviendasData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList (List<int> o),
      [bool buildParameters=true]) async {
    if(buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns= ["id"];
    var idFuture = await _obj._mnVivienda.toList(qparams);


    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList (idData);
    return idData;

  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnVivienda.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });


  }

}
// endregion ViviendaFilterBuilder




// region ViviendaFields
class ViviendaFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fInspeccion_id;
  static TableField get inspeccion_id {
    _fInspeccion_id = SqlSyntax.setField(_fInspeccion_id, "inspeccion_id", DbType.text);
    return _fInspeccion_id;
  }
  static TableField _fEdad_construccion;
  static TableField get edad_construccion {
    _fEdad_construccion = SqlSyntax.setField(_fEdad_construccion, "edad_construccion", DbType.integer);
    return _fEdad_construccion;
  }
  static TableField _fElevacion;
  static TableField get elevacion {
    _fElevacion = SqlSyntax.setField(_fElevacion, "elevacion", DbType.real);
    return _fElevacion;
  }
  static TableField _fSector;
  static TableField get sector {
    _fSector = SqlSyntax.setField(_fSector, "sector", DbType.text);
    return _fSector;
  }
  static TableField _fDireccion;
  static TableField get direccion {
    _fDireccion = SqlSyntax.setField(_fDireccion, "direccion", DbType.text);
    return _fDireccion;
  }
  static TableField _fUbicacion;
  static TableField get ubicacion {
    _fUbicacion = SqlSyntax.setField(_fUbicacion, "ubicacion", DbType.text);
    return _fUbicacion;
  }
  static TableField _fIsDeleted;
  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }

}
// endregion ViviendaFields

//region ViviendaManager
class ViviendaManager extends SqfEntityProvider {
  static String _tableName = "Vivienda";
  static String _colId = "id";

  ViviendaManager():super(DbModel(),tableName: _tableName, colId: _colId);
}
//endregion ViviendaManager


/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import Ficha.dart into where to use
      - start typing Ficha().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(ficha) / or toList(fichaList)
      - you can select one Ficha or List<Ficha> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Ficha
class Ficha {
  // FIELDS
  int id;
  String inspector;
  String fecha_inspeccion;
  String estado;
  bool activo;
  int ViviendaId;
  bool isDeleted;
  // end FIELDS

// RELATIONSHIPS
  getVivienda(VoidCallback vivienda(Vivienda o)){
    Vivienda().getById(ViviendaId, (obj) {
      vivienda(obj);
      print("OBJECT GOTT");
    });
    print("JOB DONE, LEFT");
  }
  // END RELATIONSHIPS


// COLLECTIONS
  getAnexos(VoidCallback anexoList(List<Anexo> o)) {
    Anexo().select().FichaId.equals(id).toList((objList) {
      anexoList(objList);
    });
  }
  getRespuestas(VoidCallback respuestaList(List<Respuesta> o)) {
    Respuesta().select().FichaId.equals(id).toList((objList) {
      respuestaList(objList);
    });
  }
  // END COLLECTIONS

  static const bool _softDeleteActivated=true;
  FichaManager __mnFicha;
  FichaFilterBuilder _select;

  FichaManager get _mnFicha {
    if (__mnFicha == null) __mnFicha = new FichaManager();
    return __mnFicha;
  }

  Ficha({this.id, this.inspector,this.fecha_inspeccion,this.estado,this.activo,this.ViviendaId,this.isDeleted}) { setDefaultValues();}
  Ficha.withFields(this.inspector,this.fecha_inspeccion,this.estado,this.activo,this.ViviendaId,this.isDeleted){ setDefaultValues();}
  Ficha.withId(this.id, this.inspector,this.fecha_inspeccion,this.estado,this.activo,this.ViviendaId,this.isDeleted){ setDefaultValues();}

  // methods
  Map<String, dynamic> toMap({bool forQuery=false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;    if (inspector != null) map["inspector"] = inspector;
    if (fecha_inspeccion != null) map["fecha_inspeccion"] = fecha_inspeccion;
    if (estado != null) map["estado"] = estado;
    if (activo != null) map["activo"] = forQuery? (activo ? 1 : 0) : activo;
    if (ViviendaId != null) map["ViviendaId"] = ViviendaId;
    if (isDeleted != null) map["isDeleted"] = forQuery? (isDeleted ? 1 : 0):isDeleted;

    return map;
  }

  Ficha.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.inspector = o["inspector"];
    this.fecha_inspeccion = o["fecha_inspeccion"];
    this.estado = o["estado"];
    this.activo = o["activo"] != null ? (o["activo"] == 1 || o["activo"] == true) : null;
    this.ViviendaId = o["ViviendaId"];
    this.isDeleted = !this.activo;//o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return[id,inspector,fecha_inspeccion,estado,activo,ViviendaId,isDeleted];
  }


  static fromWebUrl(String url, VoidCallback  fichaList (List<Ficha> o)) async {
    var objList = List<Ficha>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((ficha) => Ficha.fromMap(ficha)).toList();
        fichaList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Ficha.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Ficha>> fromObjectList(Future<List<dynamic>> o) async {
    var fichasList = new List<Ficha>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        fichasList.add(Ficha.fromMap(data[i]));
      }
    });
    return fichasList;
  }

  static List<Ficha> fromMapList(List<Map<String, dynamic>> query) {
    List<Ficha> fichas = List<Ficha>();
    for (Map map in query) {
      fichas.add(Ficha.fromMap(map));
    }
    return fichas;
  }

  /// returns Ficha by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Ficha if exist, otherwise returns null</returns>
  getById(int id, VoidCallback ficha(Ficha o)) {
    Ficha fichaObj;
    var fichaFuture = _mnFicha.getById(id);
    fichaFuture.then((data) {
      if (data.length > 0)
        fichaObj = Ficha.fromMap(data[0]);
      else
        fichaObj = null;
      ficha(fichaObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnFicha.insert(
          Ficha.withFields(inspector,fecha_inspeccion,estado,activo,ViviendaId,isDeleted));
    else
      id= await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Ficha> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Ficha> fichas) async {
    var results = _mnFicha.saveAll("INSERT OR REPLACE INTO Ficha (id, inspector,fecha_inspeccion,estado,activo,ViviendaId,isDeleted)  VALUES (?,?,?,?,?,?,?)",fichas);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnFicha.rawInsert(
        "INSERT OR REPLACE INTO Ficha (id, inspector,fecha_inspeccion,estado,activo,ViviendaId,isDeleted)  VALUES (?,?,?,?,?,?,?)", [id,inspector,fecha_inspeccion,estado,activo,ViviendaId,isDeleted]);
    return id;
  }


  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Ficha> fichas) async {
    var results = await _mnFicha.rawInsertAll(
        "INSERT OR REPLACE INTO Ficha (id, inspector,fecha_inspeccion,estado,activo,ViviendaId,isDeleted)  VALUES (?,?,?,?,?,?,?)", fichas);
    return results;
  }


  /// <summary>
  /// saveAs Ficha. Returns a new Primary Key value of Ficha
  /// </summary>
  /// <returns>Returns a new Primary Key value of Ficha</returns>
  Future<int> saveAs() async {
    id = await _mnFicha.insert(
        Ficha.withFields(inspector,fecha_inspeccion,estado,activo,ViviendaId,isDeleted));
    return id;
  }


  /// <summary>
  /// Deletes Ficha
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Ficha invoked (id=$id)");
    var result= BoolResult();  result = await Anexo().select().FichaId.equals(id).delete();
    if (!result.success) return result;
    else
      result = await Respuesta().select().FichaId.equals(id).delete();
    if (!result.success) return result;
    else
    if (!_softDeleteActivated)
      return _mnFicha.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnFicha.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }
  /// <summary>
  /// Recover Product
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Ficha invoked (id=$id)");var result= BoolResult();  result = await Anexo().select(getIsDeleted: true).isDeleted.equals(true).and.FichaId.equals(id).update({"isDeleted": 0});
    if (!result.success) return result;
    else  result = await Respuesta().select(getIsDeleted: true).isDeleted.equals(true).and.FichaId.equals(id).update({"isDeleted": 0});
    if (!result.success) return result;
    else  return _mnFicha.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});  }
  //private FichaFilterBuilder _Select;
  FichaFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new FichaFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted==true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  FichaFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    FichaFilterBuilder _distinct = new FichaFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted==true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if(estado==null) estado="Pendiente";
    if(activo==null) activo=false;
    if(ViviendaId==null) ViviendaId=0;
    if(isDeleted==null) isDeleted=false;
  }
//end methods
}
// endregion ficha


// region FichaField
class FichaField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  FichaFilterBuilder fichaFB;
  FichaField(FichaFilterBuilder fb) {
    param = new DbParameter();
    fichaFB = fb;
  }

  FichaField get not {
    _waitingNot = " NOT ";
    return this;
  }

  FichaFilterBuilder equals(var pValue) {
    param.expression = "=";
    fichaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, fichaFB.parameters, param, SqlSyntax.EQuals,
        fichaFB._addedBlocks)
        : setCriteria(pValue, fichaFB.parameters, param, SqlSyntax.NotEQuals,
        fichaFB._addedBlocks);
    _waitingNot = "";
    fichaFB._addedBlocks.needEndBlock[fichaFB._blockIndex] =
        fichaFB._addedBlocks.retVal;
    return fichaFB;
  }

  FichaFilterBuilder isNull() {
    fichaFB._addedBlocks = setCriteria(
        0,
        fichaFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        fichaFB._addedBlocks);
    _waitingNot = "";
    fichaFB._addedBlocks.needEndBlock[fichaFB._blockIndex] =
        fichaFB._addedBlocks.retVal;
    return fichaFB;
  }

  FichaFilterBuilder contains(dynamic pValue) {
    fichaFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        fichaFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        fichaFB._addedBlocks);
    _waitingNot = "";
    fichaFB._addedBlocks.needEndBlock[fichaFB._blockIndex] =
        fichaFB._addedBlocks.retVal;
    return fichaFB;
  }

  FichaFilterBuilder startsWith(dynamic pValue) {
    fichaFB._addedBlocks = setCriteria(
        pValue + "%",
        fichaFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        fichaFB._addedBlocks);
    _waitingNot = "";
    fichaFB._addedBlocks.needEndBlock[fichaFB._blockIndex] =
        fichaFB._addedBlocks.retVal;
    fichaFB._addedBlocks.needEndBlock[fichaFB._blockIndex] =
        fichaFB._addedBlocks.retVal;
    return fichaFB;
  }

  FichaFilterBuilder endsWith(dynamic pValue) {
    fichaFB._addedBlocks = setCriteria(
        "%" + pValue,
        fichaFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        fichaFB._addedBlocks);
    _waitingNot = "";
    fichaFB._addedBlocks.needEndBlock[fichaFB._blockIndex] =
        fichaFB._addedBlocks.retVal;
    return fichaFB;
  }

  FichaFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      fichaFB._addedBlocks = setCriteria(
          pFirst,
          fichaFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          fichaFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        fichaFB._addedBlocks = setCriteria(pFirst, fichaFB.parameters,
            param, SqlSyntax.LessThan, fichaFB._addedBlocks);
      else
        fichaFB._addedBlocks = setCriteria(pFirst, fichaFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, fichaFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        fichaFB._addedBlocks = setCriteria(pLast, fichaFB.parameters, param,
            SqlSyntax.GreaterThan, fichaFB._addedBlocks);
      else
        fichaFB._addedBlocks = setCriteria(pLast, fichaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, fichaFB._addedBlocks);
    }
    _waitingNot = "";
    fichaFB._addedBlocks.needEndBlock[fichaFB._blockIndex] =
        fichaFB._addedBlocks.retVal;
    return fichaFB;
  }

  FichaFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    fichaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, fichaFB.parameters, param,
        SqlSyntax.GreaterThan, fichaFB._addedBlocks)
        : setCriteria(pValue, fichaFB.parameters, param,
        SqlSyntax.LessThanOrEquals, fichaFB._addedBlocks);
    _waitingNot = "";
    fichaFB._addedBlocks.needEndBlock[fichaFB._blockIndex] =
        fichaFB._addedBlocks.retVal;
    return fichaFB;
  }

  FichaFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    fichaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, fichaFB.parameters, param, SqlSyntax.LessThan,
        fichaFB._addedBlocks)
        : setCriteria(pValue, fichaFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, fichaFB._addedBlocks);
    _waitingNot = "";
    fichaFB._addedBlocks.needEndBlock[fichaFB._blockIndex] =
        fichaFB._addedBlocks.retVal;
    return fichaFB;
  }

  FichaFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    fichaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, fichaFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, fichaFB._addedBlocks)
        : setCriteria(pValue, fichaFB.parameters, param, SqlSyntax.LessThan,
        fichaFB._addedBlocks);
    _waitingNot = "";
    fichaFB._addedBlocks.needEndBlock[fichaFB._blockIndex] =
        fichaFB._addedBlocks.retVal;
    return fichaFB;
  }

  FichaFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    fichaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, fichaFB.parameters, param,
        SqlSyntax.LessThanOrEquals, fichaFB._addedBlocks)
        : setCriteria(pValue, fichaFB.parameters, param,
        SqlSyntax.GreaterThan, fichaFB._addedBlocks);
    _waitingNot = "";
    fichaFB._addedBlocks.needEndBlock[fichaFB._blockIndex] =
        fichaFB._addedBlocks.retVal;
    return fichaFB;
  }

  FichaFilterBuilder inValues(var pValue) {
    fichaFB._addedBlocks = setCriteria(
        pValue,
        fichaFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        fichaFB._addedBlocks);
    _waitingNot = "";
    fichaFB._addedBlocks.needEndBlock[fichaFB._blockIndex] =
        fichaFB._addedBlocks.retVal;
    return fichaFB;
  }
}
// endregion FichaField

// region FichaFilterBuilder
class FichaFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Ficha _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  FichaFilterBuilder(Ficha obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  FichaFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  FichaFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  FichaFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  FichaFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  FichaFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  FichaFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  FichaFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  FichaFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  FichaFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  FichaFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  FichaField setField(FichaField field, String colName, DbType dbtype) {
    field = new FichaField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  FichaField _id;
  FichaField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }
  FichaField _inspector;
  FichaField get inspector {
    _inspector = setField(_inspector, "inspector", DbType.text);
    return _inspector;
  }
  FichaField _fecha_inspeccion;
  FichaField get fecha_inspeccion {
    _fecha_inspeccion = setField(_fecha_inspeccion, "fecha_inspeccion", DbType.text);
    return _fecha_inspeccion;
  }
  FichaField _estado;
  FichaField get estado {
    _estado = setField(_estado, "estado", DbType.text);
    return _estado;
  }
  FichaField _activo;
  FichaField get activo {
    _activo = setField(_activo, "activo", DbType.bool);
    return _activo;
  }
  FichaField _ViviendaId;
  FichaField get ViviendaId {
    _ViviendaId = setField(_ViviendaId, "ViviendaId", DbType.integer);
    return _ViviendaId;
  }
  FichaField _isDeleted;
  FichaField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }


  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Ficha._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }


  /// <summary>
  /// Deletes List<Ficha> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r= BoolResult();    toListPrimaryKey((idList){
      Anexo().select().FichaId.inValues(idList).delete();
    }, false);
    toListPrimaryKey((idList){
      Respuesta().select().FichaId.inValues(idList).delete();
    }, false);

    if(Ficha._softDeleteActivated)
      r = await _obj._mnFicha.updateBatch(qparams,{"isDeleted":1});
    else
      r = await _obj._mnFicha.delete(qparams);
    return r;
  }
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Ficha batch invoked");      toListPrimaryKey((idList){
      Anexo().select(getIsDeleted: true).isDeleted.equals(true).and.FichaId.inValues(idList).update({"isDeleted": 0});
    }, false);
    toListPrimaryKey((idList){
      Respuesta().select(getIsDeleted: true).isDeleted.equals(true).and.FichaId.inValues(idList).update({"isDeleted": 0});
    }, false);
    return _obj._mnFicha.updateBatch(qparams,{"isDeleted":0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnFicha.updateBatch(qparams, values);
  }

  /// This method always returns FichaObj if exist, otherwise returns null
  /// <returns>List<Ficha></returns>
  void toSingle(VoidCallback ficha(Ficha o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnFicha.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        ficha(Ficha.fromMap(data[0]));
      else
        ficha(null);
    });
  }


  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback fichaCount (int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var fichasFuture = await _obj._mnFicha.toList(qparams);
    int count = fichasFuture[0]["CNT"];
    fichaCount (count);
    return BoolResult(success:count>0, successMessage: count>0? "toCount(): $count items found":"", errorMessage: count>0?"": "toCount(): no items found");
  }

  /// This method always returns List<Ficha>.
  /// <returns>List<Ficha></returns>
  void toList(VoidCallback fichaList (List<Ficha> o)) async {

    _buildParameters();

    var fichasFuture = _obj._mnFicha.toList(qparams);

    List<Ficha> fichasData = new List<Ficha>();
    fichasFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        fichasData.add(Ficha.fromMap(data[i]));
      }
      fichaList (fichasData);
      fichasData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList (List<int> o),
      [bool buildParameters=true]) async {
    if(buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns= ["id"];
    var idFuture = await _obj._mnFicha.toList(qparams);


    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList (idData);
    return idData;

  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnFicha.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });


  }

}
// endregion FichaFilterBuilder




// region FichaFields
class FichaFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fInspector;
  static TableField get inspector {
    _fInspector = SqlSyntax.setField(_fInspector, "inspector", DbType.text);
    return _fInspector;
  }
  static TableField _fFecha_inspeccion;
  static TableField get fecha_inspeccion {
    _fFecha_inspeccion = SqlSyntax.setField(_fFecha_inspeccion, "fecha_inspeccion", DbType.text);
    return _fFecha_inspeccion;
  }
  static TableField _fEstado;
  static TableField get estado {
    _fEstado = SqlSyntax.setField(_fEstado, "estado", DbType.text);
    return _fEstado;
  }
  static TableField _fActivo;
  static TableField get activo {
    _fActivo = SqlSyntax.setField(_fActivo, "activo", DbType.bool);
    return _fActivo;
  }
  static TableField _fViviendaId;
  static TableField get ViviendaId {
    _fViviendaId = SqlSyntax.setField(_fViviendaId, "ViviendaId", DbType.integer);
    return _fViviendaId;
  }
  static TableField _fIsDeleted;
  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }

}
// endregion FichaFields

//region FichaManager
class FichaManager extends SqfEntityProvider {
  static String _tableName = "Ficha";
  static String _colId = "id";

  FichaManager():super(DbModel(),tableName: _tableName, colId: _colId);
}
//endregion FichaManager


/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import Anexo.dart into where to use
      - start typing Anexo().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(anexo) / or toList(anexoList)
      - you can select one Anexo or List<Anexo> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Anexo
class Anexo {
  // FIELDS
  int id;
  String url_anexo;
  String tipo;
  int FichaId;
  bool isDeleted;
  // end FIELDS

// RELATIONSHIPS
  getFicha(VoidCallback ficha(Ficha o)) {
    Ficha().getById(FichaId, (obj) {
      ficha(obj);
    });
  }
  // END RELATIONSHIPS


  static const bool _softDeleteActivated=true;
  AnexoManager __mnAnexo;
  AnexoFilterBuilder _select;

  AnexoManager get _mnAnexo {
    if (__mnAnexo == null) __mnAnexo = new AnexoManager();
    return __mnAnexo;
  }

  Anexo({this.id, this.url_anexo,this.tipo,this.FichaId,this.isDeleted}) { setDefaultValues();}
  Anexo.withFields(this.url_anexo,this.tipo,this.FichaId,this.isDeleted){ setDefaultValues();}
  Anexo.withId(this.id, this.url_anexo,this.tipo,this.FichaId,this.isDeleted){ setDefaultValues();}

  // methods
  Map<String, dynamic> toMap({bool forQuery=false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;    if (url_anexo != null) map["url_anexo"] = url_anexo;
    if (tipo != null) map["tipo"] = tipo;
    if (FichaId != null) map["FichaId"] = FichaId;
    if (isDeleted != null) map["isDeleted"] = forQuery? (isDeleted ? 1 : 0):isDeleted;

    return map;
  }

  Anexo.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.url_anexo = o["url_anexo"];
    this.tipo = o["tipo"];
    this.FichaId = o["FichaId"];
    this.isDeleted = o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return[id,url_anexo,tipo,FichaId,isDeleted];
  }


  static fromWebUrl(String url, VoidCallback  anexoList (List<Anexo> o)) async {
    var objList = List<Anexo>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((anexo) => Anexo.fromMap(anexo)).toList();
        anexoList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Anexo.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Anexo>> fromObjectList(Future<List<dynamic>> o) async {
    var anexosList = new List<Anexo>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        anexosList.add(Anexo.fromMap(data[i]));
      }
    });
    return anexosList;
  }

  static List<Anexo> fromMapList(List<Map<String, dynamic>> query) {
    List<Anexo> anexos = List<Anexo>();
    for (Map map in query) {
      anexos.add(Anexo.fromMap(map));
    }
    return anexos;
  }

  /// returns Anexo by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Anexo if exist, otherwise returns null</returns>
  getById(int id, VoidCallback anexo(Anexo o)) {
    Anexo anexoObj;
    var anexoFuture = _mnAnexo.getById(id);
    anexoFuture.then((data) {
      if (data.length > 0)
        anexoObj = Anexo.fromMap(data[0]);
      else
        anexoObj = null;
      anexo(anexoObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnAnexo.insert(
          Anexo.withFields(url_anexo,tipo,FichaId,isDeleted));
    else
      id= await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Anexo> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Anexo> anexos) async {
    var results = _mnAnexo.saveAll("INSERT OR REPLACE INTO Anexo (id, url_anexo,tipo,FichaId,isDeleted)  VALUES (?,?,?,?,?)",anexos);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnAnexo.rawInsert(
        "INSERT OR REPLACE INTO Anexo (id, url_anexo,tipo,FichaId,isDeleted)  VALUES (?,?,?,?,?)", [id,url_anexo,tipo,FichaId,isDeleted]);
    return id;
  }


  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Anexo> anexos) async {
    var results = await _mnAnexo.rawInsertAll(
        "INSERT OR REPLACE INTO Anexo (id, url_anexo,tipo,FichaId,isDeleted)  VALUES (?,?,?,?,?)", anexos);
    return results;
  }


  /// <summary>
  /// saveAs Anexo. Returns a new Primary Key value of Anexo
  /// </summary>
  /// <returns>Returns a new Primary Key value of Anexo</returns>
  Future<int> saveAs() async {
    id = await _mnAnexo.insert(
        Anexo.withFields(url_anexo,tipo,FichaId,isDeleted));
    return id;
  }


  /// <summary>
  /// Deletes Anexo
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Anexo invoked (id=$id)");
    if (!_softDeleteActivated)
      return _mnAnexo.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnAnexo.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }
  /// <summary>
  /// Recover Product
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Anexo invoked (id=$id)");  return _mnAnexo.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});  }
  //private AnexoFilterBuilder _Select;
  AnexoFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new AnexoFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted==true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  AnexoFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    AnexoFilterBuilder _distinct = new AnexoFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted==true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if(FichaId==null) FichaId=0;
    if(isDeleted==null) isDeleted=false;
  }
//end methods
}
// endregion anexo


// region AnexoField
class AnexoField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  AnexoFilterBuilder anexoFB;
  AnexoField(AnexoFilterBuilder fb) {
    param = new DbParameter();
    anexoFB = fb;
  }

  AnexoField get not {
    _waitingNot = " NOT ";
    return this;
  }

  AnexoFilterBuilder equals(var pValue) {
    param.expression = "=";
    anexoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, anexoFB.parameters, param, SqlSyntax.EQuals,
        anexoFB._addedBlocks)
        : setCriteria(pValue, anexoFB.parameters, param, SqlSyntax.NotEQuals,
        anexoFB._addedBlocks);
    _waitingNot = "";
    anexoFB._addedBlocks.needEndBlock[anexoFB._blockIndex] =
        anexoFB._addedBlocks.retVal;
    return anexoFB;
  }

  AnexoFilterBuilder isNull() {
    anexoFB._addedBlocks = setCriteria(
        0,
        anexoFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        anexoFB._addedBlocks);
    _waitingNot = "";
    anexoFB._addedBlocks.needEndBlock[anexoFB._blockIndex] =
        anexoFB._addedBlocks.retVal;
    return anexoFB;
  }

  AnexoFilterBuilder contains(dynamic pValue) {
    anexoFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        anexoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        anexoFB._addedBlocks);
    _waitingNot = "";
    anexoFB._addedBlocks.needEndBlock[anexoFB._blockIndex] =
        anexoFB._addedBlocks.retVal;
    return anexoFB;
  }

  AnexoFilterBuilder startsWith(dynamic pValue) {
    anexoFB._addedBlocks = setCriteria(
        pValue + "%",
        anexoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        anexoFB._addedBlocks);
    _waitingNot = "";
    anexoFB._addedBlocks.needEndBlock[anexoFB._blockIndex] =
        anexoFB._addedBlocks.retVal;
    anexoFB._addedBlocks.needEndBlock[anexoFB._blockIndex] =
        anexoFB._addedBlocks.retVal;
    return anexoFB;
  }

  AnexoFilterBuilder endsWith(dynamic pValue) {
    anexoFB._addedBlocks = setCriteria(
        "%" + pValue,
        anexoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        anexoFB._addedBlocks);
    _waitingNot = "";
    anexoFB._addedBlocks.needEndBlock[anexoFB._blockIndex] =
        anexoFB._addedBlocks.retVal;
    return anexoFB;
  }

  AnexoFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      anexoFB._addedBlocks = setCriteria(
          pFirst,
          anexoFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          anexoFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        anexoFB._addedBlocks = setCriteria(pFirst, anexoFB.parameters,
            param, SqlSyntax.LessThan, anexoFB._addedBlocks);
      else
        anexoFB._addedBlocks = setCriteria(pFirst, anexoFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, anexoFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        anexoFB._addedBlocks = setCriteria(pLast, anexoFB.parameters, param,
            SqlSyntax.GreaterThan, anexoFB._addedBlocks);
      else
        anexoFB._addedBlocks = setCriteria(pLast, anexoFB.parameters, param,
            SqlSyntax.LessThanOrEquals, anexoFB._addedBlocks);
    }
    _waitingNot = "";
    anexoFB._addedBlocks.needEndBlock[anexoFB._blockIndex] =
        anexoFB._addedBlocks.retVal;
    return anexoFB;
  }

  AnexoFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    anexoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, anexoFB.parameters, param,
        SqlSyntax.GreaterThan, anexoFB._addedBlocks)
        : setCriteria(pValue, anexoFB.parameters, param,
        SqlSyntax.LessThanOrEquals, anexoFB._addedBlocks);
    _waitingNot = "";
    anexoFB._addedBlocks.needEndBlock[anexoFB._blockIndex] =
        anexoFB._addedBlocks.retVal;
    return anexoFB;
  }

  AnexoFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    anexoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, anexoFB.parameters, param, SqlSyntax.LessThan,
        anexoFB._addedBlocks)
        : setCriteria(pValue, anexoFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, anexoFB._addedBlocks);
    _waitingNot = "";
    anexoFB._addedBlocks.needEndBlock[anexoFB._blockIndex] =
        anexoFB._addedBlocks.retVal;
    return anexoFB;
  }

  AnexoFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    anexoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, anexoFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, anexoFB._addedBlocks)
        : setCriteria(pValue, anexoFB.parameters, param, SqlSyntax.LessThan,
        anexoFB._addedBlocks);
    _waitingNot = "";
    anexoFB._addedBlocks.needEndBlock[anexoFB._blockIndex] =
        anexoFB._addedBlocks.retVal;
    return anexoFB;
  }

  AnexoFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    anexoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, anexoFB.parameters, param,
        SqlSyntax.LessThanOrEquals, anexoFB._addedBlocks)
        : setCriteria(pValue, anexoFB.parameters, param,
        SqlSyntax.GreaterThan, anexoFB._addedBlocks);
    _waitingNot = "";
    anexoFB._addedBlocks.needEndBlock[anexoFB._blockIndex] =
        anexoFB._addedBlocks.retVal;
    return anexoFB;
  }

  AnexoFilterBuilder inValues(var pValue) {
    anexoFB._addedBlocks = setCriteria(
        pValue,
        anexoFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        anexoFB._addedBlocks);
    _waitingNot = "";
    anexoFB._addedBlocks.needEndBlock[anexoFB._blockIndex] =
        anexoFB._addedBlocks.retVal;
    return anexoFB;
  }
}
// endregion AnexoField

// region AnexoFilterBuilder
class AnexoFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Anexo _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  AnexoFilterBuilder(Anexo obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  AnexoFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  AnexoFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  AnexoFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  AnexoFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  AnexoFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  AnexoFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  AnexoFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  AnexoFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  AnexoFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  AnexoFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  AnexoField setField(AnexoField field, String colName, DbType dbtype) {
    field = new AnexoField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  AnexoField _id;
  AnexoField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }
  AnexoField _url_anexo;
  AnexoField get url_anexo {
    _url_anexo = setField(_url_anexo, "url_anexo", DbType.text);
    return _url_anexo;
  }
  AnexoField _tipo;
  AnexoField get tipo {
    _tipo = setField(_tipo, "tipo", DbType.text);
    return _tipo;
  }
  AnexoField _FichaId;
  AnexoField get FichaId {
    _FichaId = setField(_FichaId, "FichaId", DbType.integer);
    return _FichaId;
  }
  AnexoField _isDeleted;
  AnexoField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }


  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Anexo._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }


  /// <summary>
  /// Deletes List<Anexo> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r= BoolResult();
    if(Anexo._softDeleteActivated)
      r = await _obj._mnAnexo.updateBatch(qparams,{"isDeleted":1});
    else
      r = await _obj._mnAnexo.delete(qparams);
    return r;
  }
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Anexo batch invoked");            return _obj._mnAnexo.updateBatch(qparams,{"isDeleted":0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnAnexo.updateBatch(qparams, values);
  }

  /// This method always returns AnexoObj if exist, otherwise returns null
  /// <returns>List<Anexo></returns>
  void toSingle(VoidCallback anexo(Anexo o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnAnexo.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        anexo(Anexo.fromMap(data[0]));
      else
        anexo(null);
    });
  }


  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback anexoCount (int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var anexosFuture = await _obj._mnAnexo.toList(qparams);
    int count = anexosFuture[0]["CNT"];
    anexoCount (count);
    return BoolResult(success:count>0, successMessage: count>0? "toCount(): $count items found":"", errorMessage: count>0?"": "toCount(): no items found");
  }

  /// This method always returns List<Anexo>.
  /// <returns>List<Anexo></returns>
  void toList(VoidCallback anexoList (List<Anexo> o)) async {

    _buildParameters();

    var anexosFuture = _obj._mnAnexo.toList(qparams);

    List<Anexo> anexosData = new List<Anexo>();
    anexosFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        anexosData.add(Anexo.fromMap(data[i]));
      }
      anexoList (anexosData);
      anexosData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList (List<int> o),
      [bool buildParameters=true]) async {
    if(buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns= ["id"];
    var idFuture = await _obj._mnAnexo.toList(qparams);


    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList (idData);
    return idData;

  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnAnexo.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });


  }

}
// endregion AnexoFilterBuilder




// region AnexoFields
class AnexoFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fUrl_anexo;
  static TableField get url_anexo {
    _fUrl_anexo = SqlSyntax.setField(_fUrl_anexo, "url_anexo", DbType.text);
    return _fUrl_anexo;
  }
  static TableField _fTipo;
  static TableField get tipo {
    _fTipo = SqlSyntax.setField(_fTipo, "tipo", DbType.text);
    return _fTipo;
  }
  static TableField _fFichaId;
  static TableField get FichaId {
    _fFichaId = SqlSyntax.setField(_fFichaId, "FichaId", DbType.integer);
    return _fFichaId;
  }
  static TableField _fIsDeleted;
  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }

}
// endregion AnexoFields

//region AnexoManager
class AnexoManager extends SqfEntityProvider {
  static String _tableName = "Anexo";
  static String _colId = "id";

  AnexoManager():super(DbModel(),tableName: _tableName, colId: _colId);
}
//endregion AnexoManager


/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import Seccion.dart into where to use
      - start typing Seccion().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(seccion) / or toList(seccionList)
      - you can select one Seccion or List<Seccion> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Seccion
class Seccion {
  // FIELDS
  int id;
  String nombre;
  bool activo;
  bool isDeleted;
  // end FIELDS


// COLLECTIONS
  getVariables(VoidCallback variableList(List<Variable> o)) {
    Variable().select().SeccionId.equals(id).toList((objList) {
      variableList(objList);
    });
  }
  // END COLLECTIONS

  static const bool _softDeleteActivated=true;
  SeccionManager __mnSeccion;
  SeccionFilterBuilder _select;

  SeccionManager get _mnSeccion {
    if (__mnSeccion == null) __mnSeccion = new SeccionManager();
    return __mnSeccion;
  }

  Seccion({this.id, this.nombre,this.activo,this.isDeleted}) { setDefaultValues();}
  Seccion.withFields(this.nombre,this.activo,this.isDeleted){ setDefaultValues();}
  Seccion.withId(this.id, this.nombre,this.activo,this.isDeleted){ setDefaultValues();}

  // methods
  Map<String, dynamic> toMap({bool forQuery=false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;    if (nombre != null) map["nombre"] = nombre;
    if (activo != null) map["activo"] = forQuery? (activo ? 1 : 0) : activo;
    if (isDeleted != null) map["isDeleted"] = forQuery? (isDeleted ? 1 : 0):isDeleted;

    return map;
  }

  Seccion.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.nombre = o["nombre"];
    print("activo: ${o["activo"]} run: ${o["activo"].runtimeType}");
    this.activo = o["activo"] != null ? (o["activo"] == 1 || o["activo"] == true) : null;
    this.isDeleted = !this.activo;//o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return[id,nombre,activo,isDeleted];
  }


  static fromWebUrl(String url, VoidCallback  seccionList (List<Seccion> o)) async {
    var objList = List<Seccion>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((seccion) => Seccion.fromMap(seccion)).toList();
        seccionList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Seccion.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Seccion>> fromObjectList(Future<List<dynamic>> o) async {
    var seccionsList = new List<Seccion>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        seccionsList.add(Seccion.fromMap(data[i]));
      }
    });
    return seccionsList;
  }

  static List<Seccion> fromMapList(List<Map<String, dynamic>> query) {
    List<Seccion> seccions = List<Seccion>();
    for (Map map in query) {
      seccions.add(Seccion.fromMap(map));
    }
    return seccions;
  }

  /// returns Seccion by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Seccion if exist, otherwise returns null</returns>
  getById(int id, VoidCallback seccion(Seccion o)) {
    Seccion seccionObj;
    var seccionFuture = _mnSeccion.getById(id);
    seccionFuture.then((data) {
      if (data.length > 0)
        seccionObj = Seccion.fromMap(data[0]);
      else
        seccionObj = null;
      seccion(seccionObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnSeccion.insert(
          Seccion.withFields(nombre,activo,isDeleted));
    else
      id= await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Seccion> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Seccion> seccions) async {
    var results = _mnSeccion.saveAll("INSERT OR REPLACE INTO Seccion (id, nombre,activo,isDeleted)  VALUES (?,?,?,?)",seccions);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnSeccion.rawInsert(
        "INSERT OR REPLACE INTO Seccion (id, nombre,activo,isDeleted)  VALUES (?,?,?,?)", [id,nombre,activo,isDeleted]);
    return id;
  }


  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Seccion> seccions) async {
    var results = await _mnSeccion.rawInsertAll(
        "INSERT OR REPLACE INTO Seccion (id, nombre,activo,isDeleted)  VALUES (?,?,?,?)", seccions);
    return results;
  }


  /// <summary>
  /// saveAs Seccion. Returns a new Primary Key value of Seccion
  /// </summary>
  /// <returns>Returns a new Primary Key value of Seccion</returns>
  Future<int> saveAs() async {
    id = await _mnSeccion.insert(
        Seccion.withFields(nombre,activo,isDeleted));
    return id;
  }


  /// <summary>
  /// Deletes Seccion
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Seccion invoked (id=$id)");
    var result= BoolResult();  result = await Variable().select().SeccionId.equals(id).delete();
    if (!result.success) return result;
    else
    if (!_softDeleteActivated)
      return _mnSeccion.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnSeccion.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }
  /// <summary>
  /// Recover Product
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Seccion invoked (id=$id)");var result= BoolResult();  result = await Variable().select(getIsDeleted: true).isDeleted.equals(true).and.SeccionId.equals(id).update({"isDeleted": 0});
    if (!result.success) return result;
    else  return _mnSeccion.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});  }
  //private SeccionFilterBuilder _Select;
  SeccionFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new SeccionFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted==true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  SeccionFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    SeccionFilterBuilder _distinct = new SeccionFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted==true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if(activo==null) activo=false;
    if(isDeleted==null) isDeleted=false;
  }
//end methods
}
// endregion seccion


// region SeccionField
class SeccionField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  SeccionFilterBuilder seccionFB;
  SeccionField(SeccionFilterBuilder fb) {
    param = new DbParameter();
    seccionFB = fb;
  }

  SeccionField get not {
    _waitingNot = " NOT ";
    return this;
  }

  SeccionFilterBuilder equals(var pValue) {
    param.expression = "=";
    seccionFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, seccionFB.parameters, param, SqlSyntax.EQuals,
        seccionFB._addedBlocks)
        : setCriteria(pValue, seccionFB.parameters, param, SqlSyntax.NotEQuals,
        seccionFB._addedBlocks);
    _waitingNot = "";
    seccionFB._addedBlocks.needEndBlock[seccionFB._blockIndex] =
        seccionFB._addedBlocks.retVal;
    return seccionFB;
  }

  SeccionFilterBuilder isNull() {
    seccionFB._addedBlocks = setCriteria(
        0,
        seccionFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        seccionFB._addedBlocks);
    _waitingNot = "";
    seccionFB._addedBlocks.needEndBlock[seccionFB._blockIndex] =
        seccionFB._addedBlocks.retVal;
    return seccionFB;
  }

  SeccionFilterBuilder contains(dynamic pValue) {
    seccionFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        seccionFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        seccionFB._addedBlocks);
    _waitingNot = "";
    seccionFB._addedBlocks.needEndBlock[seccionFB._blockIndex] =
        seccionFB._addedBlocks.retVal;
    return seccionFB;
  }

  SeccionFilterBuilder startsWith(dynamic pValue) {
    seccionFB._addedBlocks = setCriteria(
        pValue + "%",
        seccionFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        seccionFB._addedBlocks);
    _waitingNot = "";
    seccionFB._addedBlocks.needEndBlock[seccionFB._blockIndex] =
        seccionFB._addedBlocks.retVal;
    seccionFB._addedBlocks.needEndBlock[seccionFB._blockIndex] =
        seccionFB._addedBlocks.retVal;
    return seccionFB;
  }

  SeccionFilterBuilder endsWith(dynamic pValue) {
    seccionFB._addedBlocks = setCriteria(
        "%" + pValue,
        seccionFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        seccionFB._addedBlocks);
    _waitingNot = "";
    seccionFB._addedBlocks.needEndBlock[seccionFB._blockIndex] =
        seccionFB._addedBlocks.retVal;
    return seccionFB;
  }

  SeccionFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      seccionFB._addedBlocks = setCriteria(
          pFirst,
          seccionFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          seccionFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        seccionFB._addedBlocks = setCriteria(pFirst, seccionFB.parameters,
            param, SqlSyntax.LessThan, seccionFB._addedBlocks);
      else
        seccionFB._addedBlocks = setCriteria(pFirst, seccionFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, seccionFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        seccionFB._addedBlocks = setCriteria(pLast, seccionFB.parameters, param,
            SqlSyntax.GreaterThan, seccionFB._addedBlocks);
      else
        seccionFB._addedBlocks = setCriteria(pLast, seccionFB.parameters, param,
            SqlSyntax.LessThanOrEquals, seccionFB._addedBlocks);
    }
    _waitingNot = "";
    seccionFB._addedBlocks.needEndBlock[seccionFB._blockIndex] =
        seccionFB._addedBlocks.retVal;
    return seccionFB;
  }

  SeccionFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    seccionFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, seccionFB.parameters, param,
        SqlSyntax.GreaterThan, seccionFB._addedBlocks)
        : setCriteria(pValue, seccionFB.parameters, param,
        SqlSyntax.LessThanOrEquals, seccionFB._addedBlocks);
    _waitingNot = "";
    seccionFB._addedBlocks.needEndBlock[seccionFB._blockIndex] =
        seccionFB._addedBlocks.retVal;
    return seccionFB;
  }

  SeccionFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    seccionFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, seccionFB.parameters, param, SqlSyntax.LessThan,
        seccionFB._addedBlocks)
        : setCriteria(pValue, seccionFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, seccionFB._addedBlocks);
    _waitingNot = "";
    seccionFB._addedBlocks.needEndBlock[seccionFB._blockIndex] =
        seccionFB._addedBlocks.retVal;
    return seccionFB;
  }

  SeccionFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    seccionFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, seccionFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, seccionFB._addedBlocks)
        : setCriteria(pValue, seccionFB.parameters, param, SqlSyntax.LessThan,
        seccionFB._addedBlocks);
    _waitingNot = "";
    seccionFB._addedBlocks.needEndBlock[seccionFB._blockIndex] =
        seccionFB._addedBlocks.retVal;
    return seccionFB;
  }

  SeccionFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    seccionFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, seccionFB.parameters, param,
        SqlSyntax.LessThanOrEquals, seccionFB._addedBlocks)
        : setCriteria(pValue, seccionFB.parameters, param,
        SqlSyntax.GreaterThan, seccionFB._addedBlocks);
    _waitingNot = "";
    seccionFB._addedBlocks.needEndBlock[seccionFB._blockIndex] =
        seccionFB._addedBlocks.retVal;
    return seccionFB;
  }

  SeccionFilterBuilder inValues(var pValue) {
    seccionFB._addedBlocks = setCriteria(
        pValue,
        seccionFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        seccionFB._addedBlocks);
    _waitingNot = "";
    seccionFB._addedBlocks.needEndBlock[seccionFB._blockIndex] =
        seccionFB._addedBlocks.retVal;
    return seccionFB;
  }
}
// endregion SeccionField

// region SeccionFilterBuilder
class SeccionFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Seccion _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  SeccionFilterBuilder(Seccion obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  SeccionFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  SeccionFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  SeccionFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  SeccionFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  SeccionFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  SeccionFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  SeccionFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  SeccionFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  SeccionFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  SeccionFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  SeccionField setField(SeccionField field, String colName, DbType dbtype) {
    field = new SeccionField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  SeccionField _id;
  SeccionField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }
  SeccionField _nombre;
  SeccionField get nombre {
    _nombre = setField(_nombre, "nombre", DbType.text);
    return _nombre;
  }
  SeccionField _activo;
  SeccionField get activo {
    _activo = setField(_activo, "activo", DbType.bool);
    return _activo;
  }
  SeccionField _isDeleted;
  SeccionField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }


  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Seccion._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }


  /// <summary>
  /// Deletes List<Seccion> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r= BoolResult();    toListPrimaryKey((idList){
      Variable().select().SeccionId.inValues(idList).delete();
    }, false);

    if(Seccion._softDeleteActivated)
      r = await _obj._mnSeccion.updateBatch(qparams,{"isDeleted":1});
    else
      r = await _obj._mnSeccion.delete(qparams);
    return r;
  }
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Seccion batch invoked");      toListPrimaryKey((idList){
      Variable().select(getIsDeleted: true).isDeleted.equals(true).and.SeccionId.inValues(idList).update({"isDeleted": 0});
    }, false);
    return _obj._mnSeccion.updateBatch(qparams,{"isDeleted":0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnSeccion.updateBatch(qparams, values);
  }

  /// This method always returns SeccionObj if exist, otherwise returns null
  /// <returns>List<Seccion></returns>
  void toSingle(VoidCallback seccion(Seccion o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnSeccion.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        seccion(Seccion.fromMap(data[0]));
      else
        seccion(null);
    });
  }


  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback seccionCount (int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var seccionsFuture = await _obj._mnSeccion.toList(qparams);
    int count = seccionsFuture[0]["CNT"];
    seccionCount (count);
    return BoolResult(success:count>0, successMessage: count>0? "toCount(): $count items found":"", errorMessage: count>0?"": "toCount(): no items found");
  }

  /// This method always returns List<Seccion>.
  /// <returns>List<Seccion></returns>
  void toList(VoidCallback seccionList (List<Seccion> o)) async {

    _buildParameters();

    var seccionsFuture = _obj._mnSeccion.toList(qparams);

    List<Seccion> seccionsData = new List<Seccion>();
    seccionsFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        seccionsData.add(Seccion.fromMap(data[i]));
      }
      seccionList (seccionsData);
      seccionsData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList (List<int> o),
      [bool buildParameters=true]) async {
    if(buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns= ["id"];
    var idFuture = await _obj._mnSeccion.toList(qparams);


    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList (idData);
    return idData;

  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnSeccion.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });


  }

}
// endregion SeccionFilterBuilder




// region SeccionFields
class SeccionFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fNombre;
  static TableField get nombre {
    _fNombre = SqlSyntax.setField(_fNombre, "nombre", DbType.text);
    return _fNombre;
  }
  static TableField _fActivo;
  static TableField get activo {
    _fActivo = SqlSyntax.setField(_fActivo, "activo", DbType.bool);
    return _fActivo;
  }
  static TableField _fIsDeleted;
  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }

}
// endregion SeccionFields

//region SeccionManager
class SeccionManager extends SqfEntityProvider {
  static String _tableName = "Seccion";
  static String _colId = "id";

  SeccionManager():super(DbModel(),tableName: _tableName, colId: _colId);
}
//endregion SeccionManager


/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import Variable.dart into where to use
      - start typing Variable().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(variable) / or toList(variableList)
      - you can select one Variable or List<Variable> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Variable
class Variable {
  // FIELDS
  int id;
  String nombre;
  bool obligatoria;
  bool activo;
  int SeccionId;
  bool isDeleted;
  // end FIELDS

// RELATIONSHIPS
  getSeccion(VoidCallback seccion(Seccion o)) {
    Seccion().getById(SeccionId, (obj) {
      seccion(obj);
    });
  }
  // END RELATIONSHIPS


// COLLECTIONS
  getItemvariables(VoidCallback itemvariableList(List<Itemvariable> o)) {
    Itemvariable().select().VariableId.equals(id).toList((objList) {
      itemvariableList(objList);
    });
  }
  // END COLLECTIONS

  static const bool _softDeleteActivated=true;
  VariableManager __mnVariable;
  VariableFilterBuilder _select;

  VariableManager get _mnVariable {
    if (__mnVariable == null) __mnVariable = new VariableManager();
    return __mnVariable;
  }

  Variable({this.id, this.nombre,this.obligatoria,this.activo,this.SeccionId,this.isDeleted}) { setDefaultValues();}
  Variable.withFields(this.nombre,this.obligatoria,this.activo,this.SeccionId,this.isDeleted){ setDefaultValues();}
  Variable.withId(this.id, this.nombre,this.obligatoria,this.activo,this.SeccionId,this.isDeleted){ setDefaultValues();}

  // methods
  Map<String, dynamic> toMap({bool forQuery=false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;    if (nombre != null) map["nombre"] = nombre;
    if (obligatoria != null) map["obligatoria"] = forQuery? (obligatoria ? 1 : 0) : obligatoria;
    if (activo != null) map["activo"] = forQuery? (activo ? 1 : 0) : activo;
    if (SeccionId != null) map["SeccionId"] = SeccionId;
    if (isDeleted != null) map["isDeleted"] = forQuery? (isDeleted ? 1 : 0):isDeleted;

    return map;
  }

  Variable.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.nombre = o["nombre"];
    this.obligatoria = o["obligatoria"] != null ? (o["obligatoria"] == 1 || o["obligatoria"] == true) : null;
    this.activo = o["activo"] != null ? (o["activo"] == 1 || o["activo"] == true) : null;
    this.SeccionId = o["seccion_variable"];
    this.isDeleted = !this.activo;//o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return[id,nombre,obligatoria,activo,SeccionId,isDeleted];
  }


  static fromWebUrl(String url, VoidCallback  variableList (List<Variable> o)) async {
    var objList = List<Variable>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((variable) => Variable.fromMap(variable)).toList();
        variableList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Variable.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Variable>> fromObjectList(Future<List<dynamic>> o) async {
    var variablesList = new List<Variable>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        variablesList.add(Variable.fromMap(data[i]));
      }
    });
    return variablesList;
  }

  static List<Variable> fromMapList(List<Map<String, dynamic>> query) {
    List<Variable> variables = List<Variable>();
    for (Map map in query) {
      variables.add(Variable.fromMap(map));
    }
    return variables;
  }

  /// returns Variable by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Variable if exist, otherwise returns null</returns>
  getById(int id, VoidCallback variable(Variable o)) {
    Variable variableObj;
    var variableFuture = _mnVariable.getById(id);
    variableFuture.then((data) {
      if (data.length > 0)
        variableObj = Variable.fromMap(data[0]);
      else
        variableObj = null;
      variable(variableObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnVariable.insert(
          Variable.withFields(nombre,obligatoria,activo,SeccionId,isDeleted));
    else
      id= await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Variable> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Variable> variables) async {
    var results = _mnVariable.saveAll("INSERT OR REPLACE INTO Variable (id, nombre,obligatoria,activo,SeccionId,isDeleted)  VALUES (?,?,?,?,?,?)",variables);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnVariable.rawInsert(
        "INSERT OR REPLACE INTO Variable (id, nombre,obligatoria,activo,SeccionId,isDeleted)  VALUES (?,?,?,?,?,?)", [id,nombre,obligatoria,activo,SeccionId,isDeleted]);
    return id;
  }


  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Variable> variables) async {
    var results = await _mnVariable.rawInsertAll(
        "INSERT OR REPLACE INTO Variable (id, nombre,obligatoria,activo,SeccionId,isDeleted)  VALUES (?,?,?,?,?,?)", variables);
    return results;
  }


  /// <summary>
  /// saveAs Variable. Returns a new Primary Key value of Variable
  /// </summary>
  /// <returns>Returns a new Primary Key value of Variable</returns>
  Future<int> saveAs() async {
    id = await _mnVariable.insert(
        Variable.withFields(nombre,obligatoria,activo,SeccionId,isDeleted));
    return id;
  }


  /// <summary>
  /// Deletes Variable
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Variable invoked (id=$id)");
    var result= BoolResult();  result = await Itemvariable().select().VariableId.equals(id).delete();
    if (!result.success) return result;
    else
    if (!_softDeleteActivated)
      return _mnVariable.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnVariable.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }
  /// <summary>
  /// Recover Product
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Variable invoked (id=$id)");var result= BoolResult();  result = await Itemvariable().select(getIsDeleted: true).isDeleted.equals(true).and.VariableId.equals(id).update({"isDeleted": 0});
    if (!result.success) return result;
    else  return _mnVariable.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});  }
  //private VariableFilterBuilder _Select;
  VariableFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new VariableFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted==true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  VariableFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    VariableFilterBuilder _distinct = new VariableFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted==true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if(obligatoria==null) obligatoria=false;
    if(activo==null) activo=false;
    if(SeccionId==null) SeccionId=0;
    if(isDeleted==null) isDeleted=false;
  }
//end methods
}
// endregion variable


// region VariableField
class VariableField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  VariableFilterBuilder variableFB;
  VariableField(VariableFilterBuilder fb) {
    param = new DbParameter();
    variableFB = fb;
  }

  VariableField get not {
    _waitingNot = " NOT ";
    return this;
  }

  VariableFilterBuilder equals(var pValue) {
    param.expression = "=";
    variableFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, variableFB.parameters, param, SqlSyntax.EQuals,
        variableFB._addedBlocks)
        : setCriteria(pValue, variableFB.parameters, param, SqlSyntax.NotEQuals,
        variableFB._addedBlocks);
    _waitingNot = "";
    variableFB._addedBlocks.needEndBlock[variableFB._blockIndex] =
        variableFB._addedBlocks.retVal;
    return variableFB;
  }

  VariableFilterBuilder isNull() {
    variableFB._addedBlocks = setCriteria(
        0,
        variableFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        variableFB._addedBlocks);
    _waitingNot = "";
    variableFB._addedBlocks.needEndBlock[variableFB._blockIndex] =
        variableFB._addedBlocks.retVal;
    return variableFB;
  }

  VariableFilterBuilder contains(dynamic pValue) {
    variableFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        variableFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        variableFB._addedBlocks);
    _waitingNot = "";
    variableFB._addedBlocks.needEndBlock[variableFB._blockIndex] =
        variableFB._addedBlocks.retVal;
    return variableFB;
  }

  VariableFilterBuilder startsWith(dynamic pValue) {
    variableFB._addedBlocks = setCriteria(
        pValue + "%",
        variableFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        variableFB._addedBlocks);
    _waitingNot = "";
    variableFB._addedBlocks.needEndBlock[variableFB._blockIndex] =
        variableFB._addedBlocks.retVal;
    variableFB._addedBlocks.needEndBlock[variableFB._blockIndex] =
        variableFB._addedBlocks.retVal;
    return variableFB;
  }

  VariableFilterBuilder endsWith(dynamic pValue) {
    variableFB._addedBlocks = setCriteria(
        "%" + pValue,
        variableFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        variableFB._addedBlocks);
    _waitingNot = "";
    variableFB._addedBlocks.needEndBlock[variableFB._blockIndex] =
        variableFB._addedBlocks.retVal;
    return variableFB;
  }

  VariableFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      variableFB._addedBlocks = setCriteria(
          pFirst,
          variableFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          variableFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        variableFB._addedBlocks = setCriteria(pFirst, variableFB.parameters,
            param, SqlSyntax.LessThan, variableFB._addedBlocks);
      else
        variableFB._addedBlocks = setCriteria(pFirst, variableFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, variableFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        variableFB._addedBlocks = setCriteria(pLast, variableFB.parameters, param,
            SqlSyntax.GreaterThan, variableFB._addedBlocks);
      else
        variableFB._addedBlocks = setCriteria(pLast, variableFB.parameters, param,
            SqlSyntax.LessThanOrEquals, variableFB._addedBlocks);
    }
    _waitingNot = "";
    variableFB._addedBlocks.needEndBlock[variableFB._blockIndex] =
        variableFB._addedBlocks.retVal;
    return variableFB;
  }

  VariableFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    variableFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, variableFB.parameters, param,
        SqlSyntax.GreaterThan, variableFB._addedBlocks)
        : setCriteria(pValue, variableFB.parameters, param,
        SqlSyntax.LessThanOrEquals, variableFB._addedBlocks);
    _waitingNot = "";
    variableFB._addedBlocks.needEndBlock[variableFB._blockIndex] =
        variableFB._addedBlocks.retVal;
    return variableFB;
  }

  VariableFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    variableFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, variableFB.parameters, param, SqlSyntax.LessThan,
        variableFB._addedBlocks)
        : setCriteria(pValue, variableFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, variableFB._addedBlocks);
    _waitingNot = "";
    variableFB._addedBlocks.needEndBlock[variableFB._blockIndex] =
        variableFB._addedBlocks.retVal;
    return variableFB;
  }

  VariableFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    variableFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, variableFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, variableFB._addedBlocks)
        : setCriteria(pValue, variableFB.parameters, param, SqlSyntax.LessThan,
        variableFB._addedBlocks);
    _waitingNot = "";
    variableFB._addedBlocks.needEndBlock[variableFB._blockIndex] =
        variableFB._addedBlocks.retVal;
    return variableFB;
  }

  VariableFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    variableFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, variableFB.parameters, param,
        SqlSyntax.LessThanOrEquals, variableFB._addedBlocks)
        : setCriteria(pValue, variableFB.parameters, param,
        SqlSyntax.GreaterThan, variableFB._addedBlocks);
    _waitingNot = "";
    variableFB._addedBlocks.needEndBlock[variableFB._blockIndex] =
        variableFB._addedBlocks.retVal;
    return variableFB;
  }

  VariableFilterBuilder inValues(var pValue) {
    variableFB._addedBlocks = setCriteria(
        pValue,
        variableFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        variableFB._addedBlocks);
    _waitingNot = "";
    variableFB._addedBlocks.needEndBlock[variableFB._blockIndex] =
        variableFB._addedBlocks.retVal;
    return variableFB;
  }
}
// endregion VariableField

// region VariableFilterBuilder
class VariableFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Variable _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  VariableFilterBuilder(Variable obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  VariableFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  VariableFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  VariableFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  VariableFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  VariableFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  VariableFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  VariableFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  VariableFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  VariableFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  VariableFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  VariableField setField(VariableField field, String colName, DbType dbtype) {
    field = new VariableField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  VariableField _id;
  VariableField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }
  VariableField _nombre;
  VariableField get nombre {
    _nombre = setField(_nombre, "nombre", DbType.text);
    return _nombre;
  }
  VariableField _obligatoria;
  VariableField get obligatoria {
    _obligatoria = setField(_obligatoria, "obligatoria", DbType.bool);
    return _obligatoria;
  }
  VariableField _activo;
  VariableField get activo {
    _activo = setField(_activo, "activo", DbType.bool);
    return _activo;
  }
  VariableField _SeccionId;
  VariableField get SeccionId {
    _SeccionId = setField(_SeccionId, "SeccionId", DbType.integer);
    return _SeccionId;
  }
  VariableField _isDeleted;
  VariableField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }


  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Variable._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }


  /// <summary>
  /// Deletes List<Variable> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r= BoolResult();    toListPrimaryKey((idList){
      Itemvariable().select().VariableId.inValues(idList).delete();
    }, false);

    if(Variable._softDeleteActivated)
      r = await _obj._mnVariable.updateBatch(qparams,{"isDeleted":1});
    else
      r = await _obj._mnVariable.delete(qparams);
    return r;
  }
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Variable batch invoked");      toListPrimaryKey((idList){
      Itemvariable().select(getIsDeleted: true).isDeleted.equals(true).and.VariableId.inValues(idList).update({"isDeleted": 0});
    }, false);
    return _obj._mnVariable.updateBatch(qparams,{"isDeleted":0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnVariable.updateBatch(qparams, values);
  }

  /// This method always returns VariableObj if exist, otherwise returns null
  /// <returns>List<Variable></returns>
  void toSingle(VoidCallback variable(Variable o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnVariable.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        variable(Variable.fromMap(data[0]));
      else
        variable(null);
    });
  }


  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback variableCount (int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var variablesFuture = await _obj._mnVariable.toList(qparams);
    int count = variablesFuture[0]["CNT"];
    variableCount (count);
    return BoolResult(success:count>0, successMessage: count>0? "toCount(): $count items found":"", errorMessage: count>0?"": "toCount(): no items found");
  }

  /// This method always returns List<Variable>.
  /// <returns>List<Variable></returns>
  void toList(VoidCallback variableList (List<Variable> o)) async {

    _buildParameters();

    var variablesFuture = _obj._mnVariable.toList(qparams);

    List<Variable> variablesData = new List<Variable>();
    variablesFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        variablesData.add(Variable.fromMap(data[i]));
      }
      variableList (variablesData);
      variablesData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList (List<int> o),
      [bool buildParameters=true]) async {
    if(buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns= ["id"];
    var idFuture = await _obj._mnVariable.toList(qparams);


    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList (idData);
    return idData;

  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnVariable.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });


  }

}
// endregion VariableFilterBuilder




// region VariableFields
class VariableFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fNombre;
  static TableField get nombre {
    _fNombre = SqlSyntax.setField(_fNombre, "nombre", DbType.text);
    return _fNombre;
  }
  static TableField _fObligatoria;
  static TableField get obligatoria {
    _fObligatoria = SqlSyntax.setField(_fObligatoria, "obligatoria", DbType.bool);
    return _fObligatoria;
  }
  static TableField _fActivo;
  static TableField get activo {
    _fActivo = SqlSyntax.setField(_fActivo, "activo", DbType.bool);
    return _fActivo;
  }
  static TableField _fSeccionId;
  static TableField get SeccionId {
    _fSeccionId = SqlSyntax.setField(_fSeccionId, "SeccionId", DbType.integer);
    return _fSeccionId;
  }
  static TableField _fIsDeleted;
  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }

}
// endregion VariableFields

//region VariableManager
class VariableManager extends SqfEntityProvider {
  static String _tableName = "Variable";
  static String _colId = "id";

  VariableManager():super(DbModel(),tableName: _tableName, colId: _colId);
}
//endregion VariableManager


/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import Itemvariable.dart into where to use
      - start typing Itemvariable().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(itemvariable) / or toList(itemvariableList)
      - you can select one Itemvariable or List<Itemvariable> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Itemvariable
class Itemvariable {
  // FIELDS
  int id;
  String nombre;
  String tipo;
  bool activo;
  int VariableId;
  bool isDeleted;
  // end FIELDS

// RELATIONSHIPS
  getVariable(VoidCallback variable(Variable o)) {
    Variable().getById(VariableId, (obj) {
      variable(obj);
    });
  }
  // END RELATIONSHIPS


// COLLECTIONS
  getOpcions(VoidCallback opcionList(List<Opcion> o)) {
    Opcion().select().ItemVariableId.equals(id).toList((objList) {
      opcionList(objList);
    });
  }
  getRespuestas(VoidCallback respuestaList(List<Respuesta> o)) {
    Respuesta().select().ItemVariableId.equals(id).toList((objList) {
      respuestaList(objList);
    });
  }
  // END COLLECTIONS

  static const bool _softDeleteActivated=true;
  ItemvariableManager __mnItemvariable;
  ItemvariableFilterBuilder _select;

  ItemvariableManager get _mnItemvariable {
    if (__mnItemvariable == null) __mnItemvariable = new ItemvariableManager();
    return __mnItemvariable;
  }

  Itemvariable({this.id, this.nombre,this.tipo,this.activo,this.VariableId,this.isDeleted}) { setDefaultValues();}
  Itemvariable.withFields(this.nombre,this.tipo,this.activo,this.VariableId,this.isDeleted){ setDefaultValues();}
  Itemvariable.withId(this.id, this.nombre,this.tipo,this.activo,this.VariableId,this.isDeleted){ setDefaultValues();}

  // methods
  Map<String, dynamic> toMap({bool forQuery=false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;    if (nombre != null) map["nombre"] = nombre;
    if (tipo != null) map["tipo"] = tipo;
    if (activo != null) map["activo"] = forQuery? (activo ? 1 : 0) : activo;
    if (VariableId != null) map["VariableId"] = VariableId;
    if (isDeleted != null) map["isDeleted"] = forQuery? (isDeleted ? 1 : 0):isDeleted;

    return map;
  }

  Itemvariable.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.nombre = o["nombre"];
    this.tipo = o["tipo"];
    this.activo = o["activo"] != null ? (o["activo"] == 1 || o["activo"] == true) : null;
    this.VariableId = o["variable_item"];
    this.isDeleted = !this.activo;//o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return[id,nombre,tipo,activo,VariableId,isDeleted];
  }


  static fromWebUrl(String url, VoidCallback  itemvariableList (List<Itemvariable> o)) async {
    var objList = List<Itemvariable>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((itemvariable) => Itemvariable.fromMap(itemvariable)).toList();
        itemvariableList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Itemvariable.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Itemvariable>> fromObjectList(Future<List<dynamic>> o) async {
    var itemvariablesList = new List<Itemvariable>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        itemvariablesList.add(Itemvariable.fromMap(data[i]));
      }
    });
    return itemvariablesList;
  }

  static List<Itemvariable> fromMapList(List<Map<String, dynamic>> query) {
    List<Itemvariable> itemvariables = List<Itemvariable>();
    for (Map map in query) {
      itemvariables.add(Itemvariable.fromMap(map));
    }
    return itemvariables;
  }

  /// returns Itemvariable by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Itemvariable if exist, otherwise returns null</returns>
  getById(int id, VoidCallback itemvariable(Itemvariable o)) {
    Itemvariable itemvariableObj;
    var itemvariableFuture = _mnItemvariable.getById(id);
    itemvariableFuture.then((data) {
      if (data.length > 0)
        itemvariableObj = Itemvariable.fromMap(data[0]);
      else
        itemvariableObj = null;
      itemvariable(itemvariableObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnItemvariable.insert(
          Itemvariable.withFields(nombre,tipo,activo,VariableId,isDeleted));
    else
      id= await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Itemvariable> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Itemvariable> itemvariables) async {
    var results = _mnItemvariable.saveAll("INSERT OR REPLACE INTO ItemVariable (id, nombre,tipo,activo,VariableId,isDeleted)  VALUES (?,?,?,?,?,?)",itemvariables);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnItemvariable.rawInsert(
        "INSERT OR REPLACE INTO ItemVariable (id, nombre,tipo,activo,VariableId,isDeleted)  VALUES (?,?,?,?,?,?)", [id,nombre,tipo,activo,VariableId,isDeleted]);
    return id;
  }


  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Itemvariable> itemvariables) async {
    var results = await _mnItemvariable.rawInsertAll(
        "INSERT OR REPLACE INTO ItemVariable (id, nombre,tipo,activo,VariableId,isDeleted)  VALUES (?,?,?,?,?,?)", itemvariables);
    return results;
  }


  /// <summary>
  /// saveAs Itemvariable. Returns a new Primary Key value of Itemvariable
  /// </summary>
  /// <returns>Returns a new Primary Key value of Itemvariable</returns>
  Future<int> saveAs() async {
    id = await _mnItemvariable.insert(
        Itemvariable.withFields(nombre,tipo,activo,VariableId,isDeleted));
    return id;
  }


  /// <summary>
  /// Deletes Itemvariable
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Itemvariable invoked (id=$id)");
    var result= BoolResult();  result = await Opcion().select().ItemVariableId.equals(id).delete();
    if (!result.success) return result;
    else
      result = await Respuesta().select().ItemVariableId.equals(id).delete();
    if (!result.success) return result;
    else
    if (!_softDeleteActivated)
      return _mnItemvariable.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnItemvariable.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }
  /// <summary>
  /// Recover Product
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Itemvariable invoked (id=$id)");var result= BoolResult();  result = await Opcion().select(getIsDeleted: true).isDeleted.equals(true).and.ItemVariableId.equals(id).update({"isDeleted": 0});
    if (!result.success) return result;
    else  result = await Respuesta().select(getIsDeleted: true).isDeleted.equals(true).and.ItemVariableId.equals(id).update({"isDeleted": 0});
    if (!result.success) return result;
    else  return _mnItemvariable.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});  }
  //private ItemvariableFilterBuilder _Select;
  ItemvariableFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new ItemvariableFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted==true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  ItemvariableFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    ItemvariableFilterBuilder _distinct = new ItemvariableFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted==true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if(activo==null) activo=false;
    if(VariableId==null) VariableId=0;
    if(isDeleted==null) isDeleted=false;
  }
//end methods
}
// endregion itemvariable


// region ItemvariableField
class ItemvariableField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  ItemvariableFilterBuilder itemvariableFB;
  ItemvariableField(ItemvariableFilterBuilder fb) {
    param = new DbParameter();
    itemvariableFB = fb;
  }

  ItemvariableField get not {
    _waitingNot = " NOT ";
    return this;
  }

  ItemvariableFilterBuilder equals(var pValue) {
    param.expression = "=";
    itemvariableFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, itemvariableFB.parameters, param, SqlSyntax.EQuals,
        itemvariableFB._addedBlocks)
        : setCriteria(pValue, itemvariableFB.parameters, param, SqlSyntax.NotEQuals,
        itemvariableFB._addedBlocks);
    _waitingNot = "";
    itemvariableFB._addedBlocks.needEndBlock[itemvariableFB._blockIndex] =
        itemvariableFB._addedBlocks.retVal;
    return itemvariableFB;
  }

  ItemvariableFilterBuilder isNull() {
    itemvariableFB._addedBlocks = setCriteria(
        0,
        itemvariableFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        itemvariableFB._addedBlocks);
    _waitingNot = "";
    itemvariableFB._addedBlocks.needEndBlock[itemvariableFB._blockIndex] =
        itemvariableFB._addedBlocks.retVal;
    return itemvariableFB;
  }

  ItemvariableFilterBuilder contains(dynamic pValue) {
    itemvariableFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        itemvariableFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        itemvariableFB._addedBlocks);
    _waitingNot = "";
    itemvariableFB._addedBlocks.needEndBlock[itemvariableFB._blockIndex] =
        itemvariableFB._addedBlocks.retVal;
    return itemvariableFB;
  }

  ItemvariableFilterBuilder startsWith(dynamic pValue) {
    itemvariableFB._addedBlocks = setCriteria(
        pValue + "%",
        itemvariableFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        itemvariableFB._addedBlocks);
    _waitingNot = "";
    itemvariableFB._addedBlocks.needEndBlock[itemvariableFB._blockIndex] =
        itemvariableFB._addedBlocks.retVal;
    itemvariableFB._addedBlocks.needEndBlock[itemvariableFB._blockIndex] =
        itemvariableFB._addedBlocks.retVal;
    return itemvariableFB;
  }

  ItemvariableFilterBuilder endsWith(dynamic pValue) {
    itemvariableFB._addedBlocks = setCriteria(
        "%" + pValue,
        itemvariableFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        itemvariableFB._addedBlocks);
    _waitingNot = "";
    itemvariableFB._addedBlocks.needEndBlock[itemvariableFB._blockIndex] =
        itemvariableFB._addedBlocks.retVal;
    return itemvariableFB;
  }

  ItemvariableFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      itemvariableFB._addedBlocks = setCriteria(
          pFirst,
          itemvariableFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          itemvariableFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        itemvariableFB._addedBlocks = setCriteria(pFirst, itemvariableFB.parameters,
            param, SqlSyntax.LessThan, itemvariableFB._addedBlocks);
      else
        itemvariableFB._addedBlocks = setCriteria(pFirst, itemvariableFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, itemvariableFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        itemvariableFB._addedBlocks = setCriteria(pLast, itemvariableFB.parameters, param,
            SqlSyntax.GreaterThan, itemvariableFB._addedBlocks);
      else
        itemvariableFB._addedBlocks = setCriteria(pLast, itemvariableFB.parameters, param,
            SqlSyntax.LessThanOrEquals, itemvariableFB._addedBlocks);
    }
    _waitingNot = "";
    itemvariableFB._addedBlocks.needEndBlock[itemvariableFB._blockIndex] =
        itemvariableFB._addedBlocks.retVal;
    return itemvariableFB;
  }

  ItemvariableFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    itemvariableFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, itemvariableFB.parameters, param,
        SqlSyntax.GreaterThan, itemvariableFB._addedBlocks)
        : setCriteria(pValue, itemvariableFB.parameters, param,
        SqlSyntax.LessThanOrEquals, itemvariableFB._addedBlocks);
    _waitingNot = "";
    itemvariableFB._addedBlocks.needEndBlock[itemvariableFB._blockIndex] =
        itemvariableFB._addedBlocks.retVal;
    return itemvariableFB;
  }

  ItemvariableFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    itemvariableFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, itemvariableFB.parameters, param, SqlSyntax.LessThan,
        itemvariableFB._addedBlocks)
        : setCriteria(pValue, itemvariableFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, itemvariableFB._addedBlocks);
    _waitingNot = "";
    itemvariableFB._addedBlocks.needEndBlock[itemvariableFB._blockIndex] =
        itemvariableFB._addedBlocks.retVal;
    return itemvariableFB;
  }

  ItemvariableFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    itemvariableFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, itemvariableFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, itemvariableFB._addedBlocks)
        : setCriteria(pValue, itemvariableFB.parameters, param, SqlSyntax.LessThan,
        itemvariableFB._addedBlocks);
    _waitingNot = "";
    itemvariableFB._addedBlocks.needEndBlock[itemvariableFB._blockIndex] =
        itemvariableFB._addedBlocks.retVal;
    return itemvariableFB;
  }

  ItemvariableFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    itemvariableFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, itemvariableFB.parameters, param,
        SqlSyntax.LessThanOrEquals, itemvariableFB._addedBlocks)
        : setCriteria(pValue, itemvariableFB.parameters, param,
        SqlSyntax.GreaterThan, itemvariableFB._addedBlocks);
    _waitingNot = "";
    itemvariableFB._addedBlocks.needEndBlock[itemvariableFB._blockIndex] =
        itemvariableFB._addedBlocks.retVal;
    return itemvariableFB;
  }

  ItemvariableFilterBuilder inValues(var pValue) {
    itemvariableFB._addedBlocks = setCriteria(
        pValue,
        itemvariableFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        itemvariableFB._addedBlocks);
    _waitingNot = "";
    itemvariableFB._addedBlocks.needEndBlock[itemvariableFB._blockIndex] =
        itemvariableFB._addedBlocks.retVal;
    return itemvariableFB;
  }
}
// endregion ItemvariableField

// region ItemvariableFilterBuilder
class ItemvariableFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Itemvariable _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  ItemvariableFilterBuilder(Itemvariable obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  ItemvariableFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  ItemvariableFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  ItemvariableFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  ItemvariableFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  ItemvariableFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  ItemvariableFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  ItemvariableFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  ItemvariableFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  ItemvariableFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  ItemvariableFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  ItemvariableField setField(ItemvariableField field, String colName, DbType dbtype) {
    field = new ItemvariableField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  ItemvariableField _id;
  ItemvariableField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }
  ItemvariableField _nombre;
  ItemvariableField get nombre {
    _nombre = setField(_nombre, "nombre", DbType.text);
    return _nombre;
  }
  ItemvariableField _tipo;
  ItemvariableField get tipo {
    _tipo = setField(_tipo, "tipo", DbType.text);
    return _tipo;
  }
  ItemvariableField _activo;
  ItemvariableField get activo {
    _activo = setField(_activo, "activo", DbType.bool);
    return _activo;
  }
  ItemvariableField _VariableId;
  ItemvariableField get VariableId {
    _VariableId = setField(_VariableId, "VariableId", DbType.integer);
    return _VariableId;
  }
  ItemvariableField _isDeleted;
  ItemvariableField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }


  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Itemvariable._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }


  /// <summary>
  /// Deletes List<Itemvariable> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r= BoolResult();    toListPrimaryKey((idList){
      Opcion().select().ItemVariableId.inValues(idList).delete();
    }, false);
    toListPrimaryKey((idList){
      Respuesta().select().ItemVariableId.inValues(idList).delete();
    }, false);

    if(Itemvariable._softDeleteActivated)
      r = await _obj._mnItemvariable.updateBatch(qparams,{"isDeleted":1});
    else
      r = await _obj._mnItemvariable.delete(qparams);
    return r;
  }
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Itemvariable batch invoked");      toListPrimaryKey((idList){
      Opcion().select(getIsDeleted: true).isDeleted.equals(true).and.ItemVariableId.inValues(idList).update({"isDeleted": 0});
    }, false);
    toListPrimaryKey((idList){
      Respuesta().select(getIsDeleted: true).isDeleted.equals(true).and.ItemVariableId.inValues(idList).update({"isDeleted": 0});
    }, false);
    return _obj._mnItemvariable.updateBatch(qparams,{"isDeleted":0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnItemvariable.updateBatch(qparams, values);
  }

  /// This method always returns ItemvariableObj if exist, otherwise returns null
  /// <returns>List<Itemvariable></returns>
  void toSingle(VoidCallback itemvariable(Itemvariable o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnItemvariable.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        itemvariable(Itemvariable.fromMap(data[0]));
      else
        itemvariable(null);
    });
  }


  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback itemvariableCount (int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var itemvariablesFuture = await _obj._mnItemvariable.toList(qparams);
    int count = itemvariablesFuture[0]["CNT"];
    itemvariableCount (count);
    return BoolResult(success:count>0, successMessage: count>0? "toCount(): $count items found":"", errorMessage: count>0?"": "toCount(): no items found");
  }

  /// This method always returns List<Itemvariable>.
  /// <returns>List<Itemvariable></returns>
  void toList(VoidCallback itemvariableList (List<Itemvariable> o)) async {

    _buildParameters();

    var itemvariablesFuture = _obj._mnItemvariable.toList(qparams);

    List<Itemvariable> itemvariablesData = new List<Itemvariable>();
    itemvariablesFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        itemvariablesData.add(Itemvariable.fromMap(data[i]));
      }
      itemvariableList (itemvariablesData);
      itemvariablesData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList (List<int> o),
      [bool buildParameters=true]) async {
    if(buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns= ["id"];
    var idFuture = await _obj._mnItemvariable.toList(qparams);


    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList (idData);
    return idData;

  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnItemvariable.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });


  }

}
// endregion ItemvariableFilterBuilder




// region ItemvariableFields
class ItemvariableFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fNombre;
  static TableField get nombre {
    _fNombre = SqlSyntax.setField(_fNombre, "nombre", DbType.text);
    return _fNombre;
  }
  static TableField _fTipo;
  static TableField get tipo {
    _fTipo = SqlSyntax.setField(_fTipo, "tipo", DbType.text);
    return _fTipo;
  }
  static TableField _fActivo;
  static TableField get activo {
    _fActivo = SqlSyntax.setField(_fActivo, "activo", DbType.bool);
    return _fActivo;
  }
  static TableField _fVariableId;
  static TableField get VariableId {
    _fVariableId = SqlSyntax.setField(_fVariableId, "VariableId", DbType.integer);
    return _fVariableId;
  }
  static TableField _fIsDeleted;
  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }

}
// endregion ItemvariableFields

//region ItemvariableManager
class ItemvariableManager extends SqfEntityProvider {
  static String _tableName = "ItemVariable";
  static String _colId = "id";

  ItemvariableManager():super(DbModel(),tableName: _tableName, colId: _colId);
}
//endregion ItemvariableManager


/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import Opcion.dart into where to use
      - start typing Opcion().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(opcion) / or toList(opcionList)
      - you can select one Opcion or List<Opcion> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Opcion
class Opcion {
  // FIELDS
  int id;
  String nombre;
  bool activo;
  int ItemVariableId;
  bool isDeleted;
  // end FIELDS

// RELATIONSHIPS
  getItemvariable(VoidCallback itemvariable(Itemvariable o)) {
    Itemvariable().getById(ItemVariableId, (obj) {
      itemvariable(obj);
    });
  }
  // END RELATIONSHIPS


// COLLECTIONS
  getRespuestaopcionsimples(VoidCallback respuestaopcionsimpleList(List<Respuestaopcionsimple> o)) {
    Respuestaopcionsimple().select().OpcionId.equals(id).toList((objList) {
      respuestaopcionsimpleList(objList);
    });
  }
  getRespuestaopcionrespuestas(VoidCallback respuestaopcionrespuestaList(List<Opcionrespuesta> o)) {
    Opcionrespuesta().select().OpcionId.equals(id).toList((objList) {
      respuestaopcionrespuestaList(objList);
    });
  }
  // END COLLECTIONS

  static const bool _softDeleteActivated=true;
  OpcionManager __mnOpcion;
  OpcionFilterBuilder _select;

  OpcionManager get _mnOpcion {
    if (__mnOpcion == null) __mnOpcion = new OpcionManager();
    return __mnOpcion;
  }

  Opcion({this.id, this.nombre,this.activo,this.ItemVariableId,this.isDeleted}) { setDefaultValues();}
  Opcion.withFields(this.nombre,this.activo,this.ItemVariableId,this.isDeleted){ setDefaultValues();}
  Opcion.withId(this.id, this.nombre,this.activo,this.ItemVariableId,this.isDeleted){ setDefaultValues();}

  // methods
  Map<String, dynamic> toMap({bool forQuery=false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;    if (nombre != null) map["nombre"] = nombre;
    if (activo != null) map["activo"] = forQuery? (activo ? 1 : 0) : activo;
    if (ItemVariableId != null) map["ItemVariableId"] = ItemVariableId;
    if (isDeleted != null) map["isDeleted"] = forQuery? (isDeleted ? 1 : 0):isDeleted;

    return map;
  }

  Opcion.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.nombre = o["nombre"];
    this.activo = o["activo"] != null ? (o["activo"] == 1 || o["activo"] == true) : null;
    this.ItemVariableId = o["item_opcion"];
    this.isDeleted = !this.activo;//o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return[id,nombre,activo,ItemVariableId,isDeleted];
  }


  static fromWebUrl(String url, VoidCallback  opcionList (List<Opcion> o)) async {
    var objList = List<Opcion>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((opcion) => Opcion.fromMap(opcion)).toList();
        opcionList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Opcion.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Opcion>> fromObjectList(Future<List<dynamic>> o) async {
    var opcionsList = new List<Opcion>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        opcionsList.add(Opcion.fromMap(data[i]));
      }
    });
    return opcionsList;
  }

  static List<Opcion> fromMapList(List<Map<String, dynamic>> query) {
    List<Opcion> opcions = List<Opcion>();
    for (Map map in query) {
      opcions.add(Opcion.fromMap(map));
    }
    return opcions;
  }

  /// returns Opcion by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Opcion if exist, otherwise returns null</returns>
  getById(int id, VoidCallback opcion(Opcion o)) {
    Opcion opcionObj;
    var opcionFuture = _mnOpcion.getById(id);
    opcionFuture.then((data) {
      if (data.length > 0)
        opcionObj = Opcion.fromMap(data[0]);
      else
        opcionObj = null;
      opcion(opcionObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnOpcion.insert(
          Opcion.withFields(nombre,activo,ItemVariableId,isDeleted));
    else
      id= await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Opcion> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Opcion> opcions) async {
    var results = _mnOpcion.saveAll("INSERT OR REPLACE INTO Opcion (id, nombre,activo,ItemVariableId,isDeleted)  VALUES (?,?,?,?,?)",opcions);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnOpcion.rawInsert(
        "INSERT OR REPLACE INTO Opcion (id, nombre,activo,ItemVariableId,isDeleted)  VALUES (?,?,?,?,?)", [id,nombre,activo,ItemVariableId,isDeleted]);
    return id;
  }


  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Opcion> opcions) async {
    var results = await _mnOpcion.rawInsertAll(
        "INSERT OR REPLACE INTO Opcion (id, nombre,activo,ItemVariableId,isDeleted)  VALUES (?,?,?,?,?)", opcions);
    return results;
  }


  /// <summary>
  /// saveAs Opcion. Returns a new Primary Key value of Opcion
  /// </summary>
  /// <returns>Returns a new Primary Key value of Opcion</returns>
  Future<int> saveAs() async {
    id = await _mnOpcion.insert(
        Opcion.withFields(nombre,activo,ItemVariableId,isDeleted));
    return id;
  }


  /// <summary>
  /// Deletes Opcion
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Opcion invoked (id=$id)");
    var result= BoolResult();  result = await Respuestaopcionsimple().select().OpcionId.equals(id).delete();
    if (!result.success) return result;
    else
      result = await Opcionrespuesta().select().OpcionId.equals(id).delete();
    if (!result.success) return result;
    else
    if (!_softDeleteActivated)
      return _mnOpcion.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnOpcion.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }
  /// <summary>
  /// Recover Product
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Opcion invoked (id=$id)");var result= BoolResult();  result = await Respuestaopcionsimple().select(getIsDeleted: true).isDeleted.equals(true).and.OpcionId.equals(id).update({"isDeleted": 0});
    if (!result.success) return result;
    else  result = await Opcionrespuesta().select(getIsDeleted: true).isDeleted.equals(true).and.OpcionId.equals(id).update({"isDeleted": 0});
    if (!result.success) return result;
    else  return _mnOpcion.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});  }
  //private OpcionFilterBuilder _Select;
  OpcionFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new OpcionFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted==true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  OpcionFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    OpcionFilterBuilder _distinct = new OpcionFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted==true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if(activo==null) activo=false;
    if(ItemVariableId==null) ItemVariableId=0;
    if(isDeleted==null) isDeleted=false;
  }
//end methods
}
// endregion opcion


// region OpcionField
class OpcionField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  OpcionFilterBuilder opcionFB;
  OpcionField(OpcionFilterBuilder fb) {
    param = new DbParameter();
    opcionFB = fb;
  }

  OpcionField get not {
    _waitingNot = " NOT ";
    return this;
  }

  OpcionFilterBuilder equals(var pValue) {
    param.expression = "=";
    opcionFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, opcionFB.parameters, param, SqlSyntax.EQuals,
        opcionFB._addedBlocks)
        : setCriteria(pValue, opcionFB.parameters, param, SqlSyntax.NotEQuals,
        opcionFB._addedBlocks);
    _waitingNot = "";
    opcionFB._addedBlocks.needEndBlock[opcionFB._blockIndex] =
        opcionFB._addedBlocks.retVal;
    return opcionFB;
  }

  OpcionFilterBuilder isNull() {
    opcionFB._addedBlocks = setCriteria(
        0,
        opcionFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        opcionFB._addedBlocks);
    _waitingNot = "";
    opcionFB._addedBlocks.needEndBlock[opcionFB._blockIndex] =
        opcionFB._addedBlocks.retVal;
    return opcionFB;
  }

  OpcionFilterBuilder contains(dynamic pValue) {
    opcionFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        opcionFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        opcionFB._addedBlocks);
    _waitingNot = "";
    opcionFB._addedBlocks.needEndBlock[opcionFB._blockIndex] =
        opcionFB._addedBlocks.retVal;
    return opcionFB;
  }

  OpcionFilterBuilder startsWith(dynamic pValue) {
    opcionFB._addedBlocks = setCriteria(
        pValue + "%",
        opcionFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        opcionFB._addedBlocks);
    _waitingNot = "";
    opcionFB._addedBlocks.needEndBlock[opcionFB._blockIndex] =
        opcionFB._addedBlocks.retVal;
    opcionFB._addedBlocks.needEndBlock[opcionFB._blockIndex] =
        opcionFB._addedBlocks.retVal;
    return opcionFB;
  }

  OpcionFilterBuilder endsWith(dynamic pValue) {
    opcionFB._addedBlocks = setCriteria(
        "%" + pValue,
        opcionFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        opcionFB._addedBlocks);
    _waitingNot = "";
    opcionFB._addedBlocks.needEndBlock[opcionFB._blockIndex] =
        opcionFB._addedBlocks.retVal;
    return opcionFB;
  }

  OpcionFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      opcionFB._addedBlocks = setCriteria(
          pFirst,
          opcionFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          opcionFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        opcionFB._addedBlocks = setCriteria(pFirst, opcionFB.parameters,
            param, SqlSyntax.LessThan, opcionFB._addedBlocks);
      else
        opcionFB._addedBlocks = setCriteria(pFirst, opcionFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, opcionFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        opcionFB._addedBlocks = setCriteria(pLast, opcionFB.parameters, param,
            SqlSyntax.GreaterThan, opcionFB._addedBlocks);
      else
        opcionFB._addedBlocks = setCriteria(pLast, opcionFB.parameters, param,
            SqlSyntax.LessThanOrEquals, opcionFB._addedBlocks);
    }
    _waitingNot = "";
    opcionFB._addedBlocks.needEndBlock[opcionFB._blockIndex] =
        opcionFB._addedBlocks.retVal;
    return opcionFB;
  }

  OpcionFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    opcionFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, opcionFB.parameters, param,
        SqlSyntax.GreaterThan, opcionFB._addedBlocks)
        : setCriteria(pValue, opcionFB.parameters, param,
        SqlSyntax.LessThanOrEquals, opcionFB._addedBlocks);
    _waitingNot = "";
    opcionFB._addedBlocks.needEndBlock[opcionFB._blockIndex] =
        opcionFB._addedBlocks.retVal;
    return opcionFB;
  }

  OpcionFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    opcionFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, opcionFB.parameters, param, SqlSyntax.LessThan,
        opcionFB._addedBlocks)
        : setCriteria(pValue, opcionFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, opcionFB._addedBlocks);
    _waitingNot = "";
    opcionFB._addedBlocks.needEndBlock[opcionFB._blockIndex] =
        opcionFB._addedBlocks.retVal;
    return opcionFB;
  }

  OpcionFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    opcionFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, opcionFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, opcionFB._addedBlocks)
        : setCriteria(pValue, opcionFB.parameters, param, SqlSyntax.LessThan,
        opcionFB._addedBlocks);
    _waitingNot = "";
    opcionFB._addedBlocks.needEndBlock[opcionFB._blockIndex] =
        opcionFB._addedBlocks.retVal;
    return opcionFB;
  }

  OpcionFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    opcionFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, opcionFB.parameters, param,
        SqlSyntax.LessThanOrEquals, opcionFB._addedBlocks)
        : setCriteria(pValue, opcionFB.parameters, param,
        SqlSyntax.GreaterThan, opcionFB._addedBlocks);
    _waitingNot = "";
    opcionFB._addedBlocks.needEndBlock[opcionFB._blockIndex] =
        opcionFB._addedBlocks.retVal;
    return opcionFB;
  }

  OpcionFilterBuilder inValues(var pValue) {
    opcionFB._addedBlocks = setCriteria(
        pValue,
        opcionFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        opcionFB._addedBlocks);
    _waitingNot = "";
    opcionFB._addedBlocks.needEndBlock[opcionFB._blockIndex] =
        opcionFB._addedBlocks.retVal;
    return opcionFB;
  }
}
// endregion OpcionField

// region OpcionFilterBuilder
class OpcionFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Opcion _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  OpcionFilterBuilder(Opcion obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  OpcionFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  OpcionFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  OpcionFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  OpcionFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  OpcionFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  OpcionFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  OpcionFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  OpcionFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  OpcionFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  OpcionFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  OpcionField setField(OpcionField field, String colName, DbType dbtype) {
    field = new OpcionField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  OpcionField _id;
  OpcionField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }
  OpcionField _nombre;
  OpcionField get nombre {
    _nombre = setField(_nombre, "nombre", DbType.text);
    return _nombre;
  }
  OpcionField _activo;
  OpcionField get activo {
    _activo = setField(_activo, "activo", DbType.bool);
    return _activo;
  }
  OpcionField _ItemVariableId;
  OpcionField get ItemVariableId {
    _ItemVariableId = setField(_ItemVariableId, "ItemVariableId", DbType.integer);
    return _ItemVariableId;
  }
  OpcionField _isDeleted;
  OpcionField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }


  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Opcion._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }


  /// <summary>
  /// Deletes List<Opcion> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r= BoolResult();    toListPrimaryKey((idList){
      Respuestaopcionsimple().select().OpcionId.inValues(idList).delete();
    }, false);
    toListPrimaryKey((idList){
      Opcionrespuesta().select().OpcionId.inValues(idList).delete();
    }, false);

    if(Opcion._softDeleteActivated)
      r = await _obj._mnOpcion.updateBatch(qparams,{"isDeleted":1});
    else
      r = await _obj._mnOpcion.delete(qparams);
    return r;
  }
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Opcion batch invoked");      toListPrimaryKey((idList){
      Respuestaopcionsimple().select(getIsDeleted: true).isDeleted.equals(true).and.OpcionId.inValues(idList).update({"isDeleted": 0});
    }, false);
    toListPrimaryKey((idList){
      Opcionrespuesta().select(getIsDeleted: true).isDeleted.equals(true).and.OpcionId.inValues(idList).update({"isDeleted": 0});
    }, false);
    return _obj._mnOpcion.updateBatch(qparams,{"isDeleted":0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnOpcion.updateBatch(qparams, values);
  }

  /// This method always returns OpcionObj if exist, otherwise returns null
  /// <returns>List<Opcion></returns>
  void toSingle(VoidCallback opcion(Opcion o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnOpcion.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        opcion(Opcion.fromMap(data[0]));
      else
        opcion(null);
    });
  }


  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback opcionCount (int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var opcionsFuture = await _obj._mnOpcion.toList(qparams);
    int count = opcionsFuture[0]["CNT"];
    opcionCount (count);
    return BoolResult(success:count>0, successMessage: count>0? "toCount(): $count items found":"", errorMessage: count>0?"": "toCount(): no items found");
  }

  /// This method always returns List<Opcion>.
  /// <returns>List<Opcion></returns>
  void toList(VoidCallback opcionList (List<Opcion> o)) async {

    _buildParameters();

    var opcionsFuture = _obj._mnOpcion.toList(qparams);

    List<Opcion> opcionsData = new List<Opcion>();
    opcionsFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        opcionsData.add(Opcion.fromMap(data[i]));
      }
      opcionList (opcionsData);
      opcionsData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList (List<int> o),
      [bool buildParameters=true]) async {
    if(buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns= ["id"];
    var idFuture = await _obj._mnOpcion.toList(qparams);


    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList (idData);
    return idData;

  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnOpcion.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });


  }

}
// endregion OpcionFilterBuilder




// region OpcionFields
class OpcionFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fNombre;
  static TableField get nombre {
    _fNombre = SqlSyntax.setField(_fNombre, "nombre", DbType.text);
    return _fNombre;
  }
  static TableField _fActivo;
  static TableField get activo {
    _fActivo = SqlSyntax.setField(_fActivo, "activo", DbType.bool);
    return _fActivo;
  }
  static TableField _fItemVariableId;
  static TableField get ItemVariableId {
    _fItemVariableId = SqlSyntax.setField(_fItemVariableId, "ItemVariableId", DbType.integer);
    return _fItemVariableId;
  }
  static TableField _fIsDeleted;
  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }

}
// endregion OpcionFields

//region OpcionManager
class OpcionManager extends SqfEntityProvider {
  static String _tableName = "Opcion";
  static String _colId = "id";

  OpcionManager():super(DbModel(),tableName: _tableName, colId: _colId);
}
//endregion OpcionManager


/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import Respuesta.dart into where to use
      - start typing Respuesta().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(respuesta) / or toList(respuestaList)
      - you can select one Respuesta or List<Respuesta> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Respuesta
class Respuesta {
  // FIELDS
  int id;
  String nota;
  bool activo;
  int ItemVariableId;
  int FichaId;
  bool isDeleted;
  // end FIELDS

// RELATIONSHIPS
  getItemvariable(VoidCallback itemvariable(Itemvariable o)) {
    Itemvariable().getById(ItemVariableId, (obj) {
      itemvariable(obj);
    });
  }
  getFicha(VoidCallback ficha(Ficha o)) {
    Ficha().getById(FichaId, (obj) {
      ficha(obj);
    });
  }
  // END RELATIONSHIPS


// COLLECTIONS
  getRespuestatextos(VoidCallback respuestatextoList(List<Respuestatexto> o)) {
    Respuestatexto().select().RespuestaId.equals(id).toList((objList) {
      respuestatextoList(objList);
    });
  }
  getRespuestaopcionsimples(VoidCallback respuestaopcionsimpleList(List<Respuestaopcionsimple> o)) {
    Respuestaopcionsimple().select().RespuestaId.equals(id).toList((objList) {
      respuestaopcionsimpleList(objList);
    });
  }
  getRespuestaopcionmultiples(VoidCallback respuestaopcionmultipleList(List<Respuestaopcionmultiple> o)) {
    Respuestaopcionmultiple().select().RespuestaId.equals(id).toList((objList) {
      respuestaopcionmultipleList(objList);
    });
  }
  // END COLLECTIONS

  static const bool _softDeleteActivated=true;
  RespuestaManager __mnRespuesta;
  RespuestaFilterBuilder _select;

  RespuestaManager get _mnRespuesta {
    if (__mnRespuesta == null) __mnRespuesta = new RespuestaManager();
    return __mnRespuesta;
  }

  Respuesta({this.id, this.nota,this.activo,this.ItemVariableId,this.FichaId,this.isDeleted}) { setDefaultValues();}
  Respuesta.withFields(this.nota,this.activo,this.ItemVariableId,this.FichaId,this.isDeleted){ setDefaultValues();}
  Respuesta.withId(this.id, this.nota,this.activo,this.ItemVariableId,this.FichaId,this.isDeleted){ setDefaultValues();}

  // methods
  Map<String, dynamic> toMap({bool forQuery=false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;    if (nota != null) map["nota"] = nota;
    if (activo != null) map["activo"] = forQuery? (activo ? 1 : 0) : activo;
    if (ItemVariableId != null) map["ItemVariableId"] = ItemVariableId;
    if (FichaId != null) map["FichaId"] = FichaId;
    if (isDeleted != null) map["isDeleted"] = forQuery? (isDeleted ? 1 : 0):isDeleted;

    return map;
  }

  Respuesta.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.nota = o["nota"];
    this.activo = o["activo"] != null ? o["activo"] == 1 : null;
    this.ItemVariableId = o["ItemVariableId"];
    this.FichaId = o["FichaId"];
    this.isDeleted = o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return[id,nota,activo,ItemVariableId,FichaId,isDeleted];
  }


  static fromWebUrl(String url, VoidCallback  respuestaList (List<Respuesta> o)) async {
    var objList = List<Respuesta>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((respuesta) => Respuesta.fromMap(respuesta)).toList();
        respuestaList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Respuesta.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Respuesta>> fromObjectList(Future<List<dynamic>> o) async {
    var respuestasList = new List<Respuesta>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        respuestasList.add(Respuesta.fromMap(data[i]));
      }
    });
    return respuestasList;
  }

  static List<Respuesta> fromMapList(List<Map<String, dynamic>> query) {
    List<Respuesta> respuestas = List<Respuesta>();
    for (Map map in query) {
      respuestas.add(Respuesta.fromMap(map));
    }
    return respuestas;
  }

  /// returns Respuesta by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Respuesta if exist, otherwise returns null</returns>
  getById(int id, VoidCallback respuesta(Respuesta o)) {
    Respuesta respuestaObj;
    var respuestaFuture = _mnRespuesta.getById(id);
    respuestaFuture.then((data) {
      if (data.length > 0)
        respuestaObj = Respuesta.fromMap(data[0]);
      else
        respuestaObj = null;
      respuesta(respuestaObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnRespuesta.insert(
          Respuesta.withFields(nota,activo,ItemVariableId,FichaId,isDeleted));
    else
      id= await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Respuesta> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Respuesta> respuestas) async {
    var results = _mnRespuesta.saveAll("INSERT OR REPLACE INTO Respuesta (id, nota,activo,ItemVariableId,FichaId,isDeleted)  VALUES (?,?,?,?,?,?)",respuestas);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnRespuesta.rawInsert(
        "INSERT OR REPLACE INTO Respuesta (id, nota,activo,ItemVariableId,FichaId,isDeleted)  VALUES (?,?,?,?,?,?)", [id,nota,activo,ItemVariableId,FichaId,isDeleted]);
    return id;
  }


  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Respuesta> respuestas) async {
    var results = await _mnRespuesta.rawInsertAll(
        "INSERT OR REPLACE INTO Respuesta (id, nota,activo,ItemVariableId,FichaId,isDeleted)  VALUES (?,?,?,?,?,?)", respuestas);
    return results;
  }


  /// <summary>
  /// saveAs Respuesta. Returns a new Primary Key value of Respuesta
  /// </summary>
  /// <returns>Returns a new Primary Key value of Respuesta</returns>
  Future<int> saveAs() async {
    id = await _mnRespuesta.insert(
        Respuesta.withFields(nota,activo,ItemVariableId,FichaId,isDeleted));
    return id;
  }


  /// <summary>
  /// Deletes Respuesta
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Respuesta invoked (id=$id)");
    var result= BoolResult();  result = await Respuestatexto().select().RespuestaId.equals(id).delete();
    if (!result.success) return result;
    else
      result = await Respuestaopcionsimple().select().RespuestaId.equals(id).delete();
    if (!result.success) return result;
    else
      result = await Respuestaopcionmultiple().select().RespuestaId.equals(id).delete();
    if (!result.success) return result;
    else
    if (!_softDeleteActivated)
      return _mnRespuesta.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnRespuesta.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }
  /// <summary>
  /// Recover Product
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Respuesta invoked (id=$id)");var result= BoolResult();  result = await Respuestatexto().select(getIsDeleted: true).isDeleted.equals(true).and.RespuestaId.equals(id).update({"isDeleted": 0});
    if (!result.success) return result;
    else  result = await Respuestaopcionsimple().select(getIsDeleted: true).isDeleted.equals(true).and.RespuestaId.equals(id).update({"isDeleted": 0});
    if (!result.success) return result;
    else  result = await Respuestaopcionmultiple().select(getIsDeleted: true).isDeleted.equals(true).and.RespuestaId.equals(id).update({"isDeleted": 0});
    if (!result.success) return result;
    else  return _mnRespuesta.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});  }
  //private RespuestaFilterBuilder _Select;
  RespuestaFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new RespuestaFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted==true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  RespuestaFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    RespuestaFilterBuilder _distinct = new RespuestaFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted==true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if(activo==null) activo=false;
    if(ItemVariableId==null) ItemVariableId=0;
    if(FichaId==null) FichaId=0;
    if(isDeleted==null) isDeleted=false;
  }
//end methods
}
// endregion respuesta


// region RespuestaField
class RespuestaField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  RespuestaFilterBuilder respuestaFB;
  RespuestaField(RespuestaFilterBuilder fb) {
    param = new DbParameter();
    respuestaFB = fb;
  }

  RespuestaField get not {
    _waitingNot = " NOT ";
    return this;
  }

  RespuestaFilterBuilder equals(var pValue) {
    param.expression = "=";
    respuestaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaFB.parameters, param, SqlSyntax.EQuals,
        respuestaFB._addedBlocks)
        : setCriteria(pValue, respuestaFB.parameters, param, SqlSyntax.NotEQuals,
        respuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaFB._addedBlocks.needEndBlock[respuestaFB._blockIndex] =
        respuestaFB._addedBlocks.retVal;
    return respuestaFB;
  }

  RespuestaFilterBuilder isNull() {
    respuestaFB._addedBlocks = setCriteria(
        0,
        respuestaFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaFB._addedBlocks.needEndBlock[respuestaFB._blockIndex] =
        respuestaFB._addedBlocks.retVal;
    return respuestaFB;
  }

  RespuestaFilterBuilder contains(dynamic pValue) {
    respuestaFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        respuestaFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaFB._addedBlocks.needEndBlock[respuestaFB._blockIndex] =
        respuestaFB._addedBlocks.retVal;
    return respuestaFB;
  }

  RespuestaFilterBuilder startsWith(dynamic pValue) {
    respuestaFB._addedBlocks = setCriteria(
        pValue + "%",
        respuestaFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaFB._addedBlocks.needEndBlock[respuestaFB._blockIndex] =
        respuestaFB._addedBlocks.retVal;
    respuestaFB._addedBlocks.needEndBlock[respuestaFB._blockIndex] =
        respuestaFB._addedBlocks.retVal;
    return respuestaFB;
  }

  RespuestaFilterBuilder endsWith(dynamic pValue) {
    respuestaFB._addedBlocks = setCriteria(
        "%" + pValue,
        respuestaFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaFB._addedBlocks.needEndBlock[respuestaFB._blockIndex] =
        respuestaFB._addedBlocks.retVal;
    return respuestaFB;
  }

  RespuestaFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      respuestaFB._addedBlocks = setCriteria(
          pFirst,
          respuestaFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          respuestaFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        respuestaFB._addedBlocks = setCriteria(pFirst, respuestaFB.parameters,
            param, SqlSyntax.LessThan, respuestaFB._addedBlocks);
      else
        respuestaFB._addedBlocks = setCriteria(pFirst, respuestaFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, respuestaFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        respuestaFB._addedBlocks = setCriteria(pLast, respuestaFB.parameters, param,
            SqlSyntax.GreaterThan, respuestaFB._addedBlocks);
      else
        respuestaFB._addedBlocks = setCriteria(pLast, respuestaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, respuestaFB._addedBlocks);
    }
    _waitingNot = "";
    respuestaFB._addedBlocks.needEndBlock[respuestaFB._blockIndex] =
        respuestaFB._addedBlocks.retVal;
    return respuestaFB;
  }

  RespuestaFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    respuestaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaFB.parameters, param,
        SqlSyntax.GreaterThan, respuestaFB._addedBlocks)
        : setCriteria(pValue, respuestaFB.parameters, param,
        SqlSyntax.LessThanOrEquals, respuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaFB._addedBlocks.needEndBlock[respuestaFB._blockIndex] =
        respuestaFB._addedBlocks.retVal;
    return respuestaFB;
  }

  RespuestaFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    respuestaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaFB.parameters, param, SqlSyntax.LessThan,
        respuestaFB._addedBlocks)
        : setCriteria(pValue, respuestaFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, respuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaFB._addedBlocks.needEndBlock[respuestaFB._blockIndex] =
        respuestaFB._addedBlocks.retVal;
    return respuestaFB;
  }

  RespuestaFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    respuestaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, respuestaFB._addedBlocks)
        : setCriteria(pValue, respuestaFB.parameters, param, SqlSyntax.LessThan,
        respuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaFB._addedBlocks.needEndBlock[respuestaFB._blockIndex] =
        respuestaFB._addedBlocks.retVal;
    return respuestaFB;
  }

  RespuestaFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    respuestaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaFB.parameters, param,
        SqlSyntax.LessThanOrEquals, respuestaFB._addedBlocks)
        : setCriteria(pValue, respuestaFB.parameters, param,
        SqlSyntax.GreaterThan, respuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaFB._addedBlocks.needEndBlock[respuestaFB._blockIndex] =
        respuestaFB._addedBlocks.retVal;
    return respuestaFB;
  }

  RespuestaFilterBuilder inValues(var pValue) {
    respuestaFB._addedBlocks = setCriteria(
        pValue,
        respuestaFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaFB._addedBlocks.needEndBlock[respuestaFB._blockIndex] =
        respuestaFB._addedBlocks.retVal;
    return respuestaFB;
  }
}
// endregion RespuestaField

// region RespuestaFilterBuilder
class RespuestaFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Respuesta _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  RespuestaFilterBuilder(Respuesta obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  RespuestaFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  RespuestaFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  RespuestaFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  RespuestaFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  RespuestaFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  RespuestaFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  RespuestaFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  RespuestaFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  RespuestaFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  RespuestaFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  RespuestaField setField(RespuestaField field, String colName, DbType dbtype) {
    field = new RespuestaField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  RespuestaField _id;
  RespuestaField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }
  RespuestaField _nota;
  RespuestaField get nota {
    _nota = setField(_nota, "nota", DbType.text);
    return _nota;
  }
  RespuestaField _activo;
  RespuestaField get activo {
    _activo = setField(_activo, "activo", DbType.bool);
    return _activo;
  }
  RespuestaField _ItemVariableId;
  RespuestaField get ItemVariableId {
    _ItemVariableId = setField(_ItemVariableId, "ItemVariableId", DbType.integer);
    return _ItemVariableId;
  }
  RespuestaField _FichaId;
  RespuestaField get FichaId {
    _FichaId = setField(_FichaId, "FichaId", DbType.integer);
    return _FichaId;
  }
  RespuestaField _isDeleted;
  RespuestaField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }


  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Respuesta._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }


  /// <summary>
  /// Deletes List<Respuesta> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r= BoolResult();    toListPrimaryKey((idList){
      Respuestatexto().select().RespuestaId.inValues(idList).delete();
    }, false);
    toListPrimaryKey((idList){
      Respuestaopcionsimple().select().RespuestaId.inValues(idList).delete();
    }, false);
    toListPrimaryKey((idList){
      Respuestaopcionmultiple().select().RespuestaId.inValues(idList).delete();
    }, false);

    if(Respuesta._softDeleteActivated)
      r = await _obj._mnRespuesta.updateBatch(qparams,{"isDeleted":1});
    else
      r = await _obj._mnRespuesta.delete(qparams);
    return r;
  }
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Respuesta batch invoked");      toListPrimaryKey((idList){
      Respuestatexto().select(getIsDeleted: true).isDeleted.equals(true).and.RespuestaId.inValues(idList).update({"isDeleted": 0});
    }, false);
    toListPrimaryKey((idList){
      Respuestaopcionsimple().select(getIsDeleted: true).isDeleted.equals(true).and.RespuestaId.inValues(idList).update({"isDeleted": 0});
    }, false);
    toListPrimaryKey((idList){
      Respuestaopcionmultiple().select(getIsDeleted: true).isDeleted.equals(true).and.RespuestaId.inValues(idList).update({"isDeleted": 0});
    }, false);
    return _obj._mnRespuesta.updateBatch(qparams,{"isDeleted":0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnRespuesta.updateBatch(qparams, values);
  }

  /// This method always returns RespuestaObj if exist, otherwise returns null
  /// <returns>List<Respuesta></returns>
  void toSingle(VoidCallback respuesta(Respuesta o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnRespuesta.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        respuesta(Respuesta.fromMap(data[0]));
      else
        respuesta(null);
    });
  }


  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback respuestaCount (int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var respuestasFuture = await _obj._mnRespuesta.toList(qparams);
    int count = respuestasFuture[0]["CNT"];
    respuestaCount (count);
    return BoolResult(success:count>0, successMessage: count>0? "toCount(): $count items found":"", errorMessage: count>0?"": "toCount(): no items found");
  }

  /// This method always returns List<Respuesta>.
  /// <returns>List<Respuesta></returns>
  void toList(VoidCallback respuestaList (List<Respuesta> o)) async {

    _buildParameters();

    var respuestasFuture = _obj._mnRespuesta.toList(qparams);

    List<Respuesta> respuestasData = new List<Respuesta>();
    respuestasFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        respuestasData.add(Respuesta.fromMap(data[i]));
      }
      respuestaList (respuestasData);
      respuestasData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList (List<int> o),
      [bool buildParameters=true]) async {
    if(buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns= ["id"];
    var idFuture = await _obj._mnRespuesta.toList(qparams);


    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList (idData);
    return idData;

  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnRespuesta.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });


  }

}
// endregion RespuestaFilterBuilder




// region RespuestaFields
class RespuestaFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fNota;
  static TableField get nota {
    _fNota = SqlSyntax.setField(_fNota, "nota", DbType.text);
    return _fNota;
  }
  static TableField _fActivo;
  static TableField get activo {
    _fActivo = SqlSyntax.setField(_fActivo, "activo", DbType.bool);
    return _fActivo;
  }
  static TableField _fItemVariableId;
  static TableField get ItemVariableId {
    _fItemVariableId = SqlSyntax.setField(_fItemVariableId, "ItemVariableId", DbType.integer);
    return _fItemVariableId;
  }
  static TableField _fFichaId;
  static TableField get FichaId {
    _fFichaId = SqlSyntax.setField(_fFichaId, "FichaId", DbType.integer);
    return _fFichaId;
  }
  static TableField _fIsDeleted;
  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }

}
// endregion RespuestaFields

//region RespuestaManager
class RespuestaManager extends SqfEntityProvider {
  static String _tableName = "Respuesta";
  static String _colId = "id";

  RespuestaManager():super(DbModel(),tableName: _tableName, colId: _colId);
}
//endregion RespuestaManager


/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import Respuestatexto.dart into where to use
      - start typing Respuestatexto().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(respuestatexto) / or toList(respuestatextoList)
      - you can select one Respuestatexto or List<Respuestatexto> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Respuestatexto
class Respuestatexto {
  // FIELDS
  int id;
  String texto;
  int RespuestaId;
  bool isDeleted;
  // end FIELDS

// RELATIONSHIPS
  getRespuesta(VoidCallback respuesta(Respuesta o)) {
    Respuesta().getById(RespuestaId, (obj) {
      respuesta(obj);
    });
  }
  // END RELATIONSHIPS


  static const bool _softDeleteActivated=true;
  RespuestatextoManager __mnRespuestatexto;
  RespuestatextoFilterBuilder _select;

  RespuestatextoManager get _mnRespuestatexto {
    if (__mnRespuestatexto == null) __mnRespuestatexto = new RespuestatextoManager();
    return __mnRespuestatexto;
  }

  Respuestatexto({this.id, this.texto,this.RespuestaId,this.isDeleted}) { setDefaultValues();}
  Respuestatexto.withFields(this.texto,this.RespuestaId,this.isDeleted){ setDefaultValues();}
  Respuestatexto.withId(this.id, this.texto,this.RespuestaId,this.isDeleted){ setDefaultValues();}

  // methods
  Map<String, dynamic> toMap({bool forQuery=false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;    if (texto != null) map["texto"] = texto;
    if (RespuestaId != null) map["RespuestaId"] = RespuestaId;
    if (isDeleted != null) map["isDeleted"] = forQuery? (isDeleted ? 1 : 0):isDeleted;

    return map;
  }

  Respuestatexto.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.texto = o["texto"];
    this.RespuestaId = o["RespuestaId"];
    this.isDeleted = o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return[id,texto,RespuestaId,isDeleted];
  }


  static fromWebUrl(String url, VoidCallback  respuestatextoList (List<Respuestatexto> o)) async {
    var objList = List<Respuestatexto>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((respuestatexto) => Respuestatexto.fromMap(respuestatexto)).toList();
        respuestatextoList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Respuestatexto.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Respuestatexto>> fromObjectList(Future<List<dynamic>> o) async {
    var respuestatextosList = new List<Respuestatexto>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        respuestatextosList.add(Respuestatexto.fromMap(data[i]));
      }
    });
    return respuestatextosList;
  }

  static List<Respuestatexto> fromMapList(List<Map<String, dynamic>> query) {
    List<Respuestatexto> respuestatextos = List<Respuestatexto>();
    for (Map map in query) {
      respuestatextos.add(Respuestatexto.fromMap(map));
    }
    return respuestatextos;
  }

  /// returns Respuestatexto by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Respuestatexto if exist, otherwise returns null</returns>
  getById(int id, VoidCallback respuestatexto(Respuestatexto o)) {
    Respuestatexto respuestatextoObj;
    var respuestatextoFuture = _mnRespuestatexto.getById(id);
    respuestatextoFuture.then((data) {
      if (data.length > 0)
        respuestatextoObj = Respuestatexto.fromMap(data[0]);
      else
        respuestatextoObj = null;
      respuestatexto(respuestatextoObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnRespuestatexto.insert(
          Respuestatexto.withFields(texto,RespuestaId,isDeleted));
    else
      id= await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Respuestatexto> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Respuestatexto> respuestatextos) async {
    var results = _mnRespuestatexto.saveAll("INSERT OR REPLACE INTO RespuestaTexto (id, texto,RespuestaId,isDeleted)  VALUES (?,?,?,?)",respuestatextos);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnRespuestatexto.rawInsert(
        "INSERT OR REPLACE INTO RespuestaTexto (id, texto,RespuestaId,isDeleted)  VALUES (?,?,?,?)", [id,texto,RespuestaId,isDeleted]);
    return id;
  }


  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Respuestatexto> respuestatextos) async {
    var results = await _mnRespuestatexto.rawInsertAll(
        "INSERT OR REPLACE INTO RespuestaTexto (id, texto,RespuestaId,isDeleted)  VALUES (?,?,?,?)", respuestatextos);
    return results;
  }


  /// <summary>
  /// saveAs Respuestatexto. Returns a new Primary Key value of Respuestatexto
  /// </summary>
  /// <returns>Returns a new Primary Key value of Respuestatexto</returns>
  Future<int> saveAs() async {
    id = await _mnRespuestatexto.insert(
        Respuestatexto.withFields(texto,RespuestaId,isDeleted));
    return id;
  }


  /// <summary>
  /// Deletes Respuestatexto
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Respuestatexto invoked (id=$id)");
    if (!_softDeleteActivated)
      return _mnRespuestatexto.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnRespuestatexto.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }
  /// <summary>
  /// Recover Product
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Respuestatexto invoked (id=$id)");  return _mnRespuestatexto.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});  }
  //private RespuestatextoFilterBuilder _Select;
  RespuestatextoFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new RespuestatextoFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted==true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  RespuestatextoFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    RespuestatextoFilterBuilder _distinct = new RespuestatextoFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted==true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if(RespuestaId==null) RespuestaId=0;
    if(isDeleted==null) isDeleted=false;
  }
//end methods
}
// endregion respuestatexto


// region RespuestatextoField
class RespuestatextoField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  RespuestatextoFilterBuilder respuestatextoFB;
  RespuestatextoField(RespuestatextoFilterBuilder fb) {
    param = new DbParameter();
    respuestatextoFB = fb;
  }

  RespuestatextoField get not {
    _waitingNot = " NOT ";
    return this;
  }

  RespuestatextoFilterBuilder equals(var pValue) {
    param.expression = "=";
    respuestatextoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestatextoFB.parameters, param, SqlSyntax.EQuals,
        respuestatextoFB._addedBlocks)
        : setCriteria(pValue, respuestatextoFB.parameters, param, SqlSyntax.NotEQuals,
        respuestatextoFB._addedBlocks);
    _waitingNot = "";
    respuestatextoFB._addedBlocks.needEndBlock[respuestatextoFB._blockIndex] =
        respuestatextoFB._addedBlocks.retVal;
    return respuestatextoFB;
  }

  RespuestatextoFilterBuilder isNull() {
    respuestatextoFB._addedBlocks = setCriteria(
        0,
        respuestatextoFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestatextoFB._addedBlocks);
    _waitingNot = "";
    respuestatextoFB._addedBlocks.needEndBlock[respuestatextoFB._blockIndex] =
        respuestatextoFB._addedBlocks.retVal;
    return respuestatextoFB;
  }

  RespuestatextoFilterBuilder contains(dynamic pValue) {
    respuestatextoFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        respuestatextoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestatextoFB._addedBlocks);
    _waitingNot = "";
    respuestatextoFB._addedBlocks.needEndBlock[respuestatextoFB._blockIndex] =
        respuestatextoFB._addedBlocks.retVal;
    return respuestatextoFB;
  }

  RespuestatextoFilterBuilder startsWith(dynamic pValue) {
    respuestatextoFB._addedBlocks = setCriteria(
        pValue + "%",
        respuestatextoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestatextoFB._addedBlocks);
    _waitingNot = "";
    respuestatextoFB._addedBlocks.needEndBlock[respuestatextoFB._blockIndex] =
        respuestatextoFB._addedBlocks.retVal;
    respuestatextoFB._addedBlocks.needEndBlock[respuestatextoFB._blockIndex] =
        respuestatextoFB._addedBlocks.retVal;
    return respuestatextoFB;
  }

  RespuestatextoFilterBuilder endsWith(dynamic pValue) {
    respuestatextoFB._addedBlocks = setCriteria(
        "%" + pValue,
        respuestatextoFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestatextoFB._addedBlocks);
    _waitingNot = "";
    respuestatextoFB._addedBlocks.needEndBlock[respuestatextoFB._blockIndex] =
        respuestatextoFB._addedBlocks.retVal;
    return respuestatextoFB;
  }

  RespuestatextoFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      respuestatextoFB._addedBlocks = setCriteria(
          pFirst,
          respuestatextoFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          respuestatextoFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        respuestatextoFB._addedBlocks = setCriteria(pFirst, respuestatextoFB.parameters,
            param, SqlSyntax.LessThan, respuestatextoFB._addedBlocks);
      else
        respuestatextoFB._addedBlocks = setCriteria(pFirst, respuestatextoFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, respuestatextoFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        respuestatextoFB._addedBlocks = setCriteria(pLast, respuestatextoFB.parameters, param,
            SqlSyntax.GreaterThan, respuestatextoFB._addedBlocks);
      else
        respuestatextoFB._addedBlocks = setCriteria(pLast, respuestatextoFB.parameters, param,
            SqlSyntax.LessThanOrEquals, respuestatextoFB._addedBlocks);
    }
    _waitingNot = "";
    respuestatextoFB._addedBlocks.needEndBlock[respuestatextoFB._blockIndex] =
        respuestatextoFB._addedBlocks.retVal;
    return respuestatextoFB;
  }

  RespuestatextoFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    respuestatextoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestatextoFB.parameters, param,
        SqlSyntax.GreaterThan, respuestatextoFB._addedBlocks)
        : setCriteria(pValue, respuestatextoFB.parameters, param,
        SqlSyntax.LessThanOrEquals, respuestatextoFB._addedBlocks);
    _waitingNot = "";
    respuestatextoFB._addedBlocks.needEndBlock[respuestatextoFB._blockIndex] =
        respuestatextoFB._addedBlocks.retVal;
    return respuestatextoFB;
  }

  RespuestatextoFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    respuestatextoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestatextoFB.parameters, param, SqlSyntax.LessThan,
        respuestatextoFB._addedBlocks)
        : setCriteria(pValue, respuestatextoFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, respuestatextoFB._addedBlocks);
    _waitingNot = "";
    respuestatextoFB._addedBlocks.needEndBlock[respuestatextoFB._blockIndex] =
        respuestatextoFB._addedBlocks.retVal;
    return respuestatextoFB;
  }

  RespuestatextoFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    respuestatextoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestatextoFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, respuestatextoFB._addedBlocks)
        : setCriteria(pValue, respuestatextoFB.parameters, param, SqlSyntax.LessThan,
        respuestatextoFB._addedBlocks);
    _waitingNot = "";
    respuestatextoFB._addedBlocks.needEndBlock[respuestatextoFB._blockIndex] =
        respuestatextoFB._addedBlocks.retVal;
    return respuestatextoFB;
  }

  RespuestatextoFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    respuestatextoFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestatextoFB.parameters, param,
        SqlSyntax.LessThanOrEquals, respuestatextoFB._addedBlocks)
        : setCriteria(pValue, respuestatextoFB.parameters, param,
        SqlSyntax.GreaterThan, respuestatextoFB._addedBlocks);
    _waitingNot = "";
    respuestatextoFB._addedBlocks.needEndBlock[respuestatextoFB._blockIndex] =
        respuestatextoFB._addedBlocks.retVal;
    return respuestatextoFB;
  }

  RespuestatextoFilterBuilder inValues(var pValue) {
    respuestatextoFB._addedBlocks = setCriteria(
        pValue,
        respuestatextoFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestatextoFB._addedBlocks);
    _waitingNot = "";
    respuestatextoFB._addedBlocks.needEndBlock[respuestatextoFB._blockIndex] =
        respuestatextoFB._addedBlocks.retVal;
    return respuestatextoFB;
  }
}
// endregion RespuestatextoField

// region RespuestatextoFilterBuilder
class RespuestatextoFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Respuestatexto _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  RespuestatextoFilterBuilder(Respuestatexto obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  RespuestatextoFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  RespuestatextoFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  RespuestatextoFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  RespuestatextoFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  RespuestatextoFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  RespuestatextoFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  RespuestatextoFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  RespuestatextoFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  RespuestatextoFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  RespuestatextoFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  RespuestatextoField setField(RespuestatextoField field, String colName, DbType dbtype) {
    field = new RespuestatextoField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  RespuestatextoField _id;
  RespuestatextoField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }
  RespuestatextoField _texto;
  RespuestatextoField get texto {
    _texto = setField(_texto, "texto", DbType.text);
    return _texto;
  }
  RespuestatextoField _RespuestaId;
  RespuestatextoField get RespuestaId {
    _RespuestaId = setField(_RespuestaId, "RespuestaId", DbType.integer);
    return _RespuestaId;
  }
  RespuestatextoField _isDeleted;
  RespuestatextoField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }


  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Respuestatexto._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }


  /// <summary>
  /// Deletes List<Respuestatexto> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r= BoolResult();
    if(Respuestatexto._softDeleteActivated)
      r = await _obj._mnRespuestatexto.updateBatch(qparams,{"isDeleted":1});
    else
      r = await _obj._mnRespuestatexto.delete(qparams);
    return r;
  }
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Respuestatexto batch invoked");            return _obj._mnRespuestatexto.updateBatch(qparams,{"isDeleted":0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnRespuestatexto.updateBatch(qparams, values);
  }

  /// This method always returns RespuestatextoObj if exist, otherwise returns null
  /// <returns>List<Respuestatexto></returns>
  void toSingle(VoidCallback respuestatexto(Respuestatexto o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnRespuestatexto.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        respuestatexto(Respuestatexto.fromMap(data[0]));
      else
        respuestatexto(null);
    });
  }


  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback respuestatextoCount (int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var respuestatextosFuture = await _obj._mnRespuestatexto.toList(qparams);
    int count = respuestatextosFuture[0]["CNT"];
    respuestatextoCount (count);
    return BoolResult(success:count>0, successMessage: count>0? "toCount(): $count items found":"", errorMessage: count>0?"": "toCount(): no items found");
  }

  /// This method always returns List<Respuestatexto>.
  /// <returns>List<Respuestatexto></returns>
  void toList(VoidCallback respuestatextoList (List<Respuestatexto> o)) async {

    _buildParameters();

    var respuestatextosFuture = _obj._mnRespuestatexto.toList(qparams);

    List<Respuestatexto> respuestatextosData = new List<Respuestatexto>();
    respuestatextosFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        respuestatextosData.add(Respuestatexto.fromMap(data[i]));
      }
      respuestatextoList (respuestatextosData);
      respuestatextosData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList (List<int> o),
      [bool buildParameters=true]) async {
    if(buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns= ["id"];
    var idFuture = await _obj._mnRespuestatexto.toList(qparams);


    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList (idData);
    return idData;

  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnRespuestatexto.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });


  }

}
// endregion RespuestatextoFilterBuilder




// region RespuestatextoFields
class RespuestatextoFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fTexto;
  static TableField get texto {
    _fTexto = SqlSyntax.setField(_fTexto, "texto", DbType.text);
    return _fTexto;
  }
  static TableField _fRespuestaId;
  static TableField get RespuestaId {
    _fRespuestaId = SqlSyntax.setField(_fRespuestaId, "RespuestaId", DbType.integer);
    return _fRespuestaId;
  }
  static TableField _fIsDeleted;
  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }

}
// endregion RespuestatextoFields

//region RespuestatextoManager
class RespuestatextoManager extends SqfEntityProvider {
  static String _tableName = "RespuestaTexto";
  static String _colId = "id";

  RespuestatextoManager():super(DbModel(),tableName: _tableName, colId: _colId);
}
//endregion RespuestatextoManager


/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import Respuestaopcionsimple.dart into where to use
      - start typing Respuestaopcionsimple().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(respuestaopcionsimple) / or toList(respuestaopcionsimpleList)
      - you can select one Respuestaopcionsimple or List<Respuestaopcionsimple> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Respuestaopcionsimple
class Respuestaopcionsimple {
  // FIELDS
  int id;
  int OpcionId;
  int RespuestaId;
  bool isDeleted;
  // end FIELDS

// RELATIONSHIPS
  getOpcion(VoidCallback opcion(Opcion o)) {
    Opcion().getById(OpcionId, (obj) {
      opcion(obj);
    });
  }
  getRespuesta(VoidCallback respuesta(Respuesta o)) {
    Respuesta().getById(RespuestaId, (obj) {
      respuesta(obj);
    });
  }
  // END RELATIONSHIPS


  static const bool _softDeleteActivated=true;
  RespuestaopcionsimpleManager __mnRespuestaopcionsimple;
  RespuestaopcionsimpleFilterBuilder _select;

  RespuestaopcionsimpleManager get _mnRespuestaopcionsimple {
    if (__mnRespuestaopcionsimple == null) __mnRespuestaopcionsimple = new RespuestaopcionsimpleManager();
    return __mnRespuestaopcionsimple;
  }

  Respuestaopcionsimple({this.id, this.OpcionId,this.RespuestaId,this.isDeleted}) { setDefaultValues();}
  Respuestaopcionsimple.withFields(this.OpcionId,this.RespuestaId,this.isDeleted){ setDefaultValues();}
  Respuestaopcionsimple.withId(this.id, this.OpcionId,this.RespuestaId,this.isDeleted){ setDefaultValues();}

  // methods
  Map<String, dynamic> toMap({bool forQuery=false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;    if (OpcionId != null) map["OpcionId"] = OpcionId;
    if (RespuestaId != null) map["RespuestaId"] = RespuestaId;
    if (isDeleted != null) map["isDeleted"] = forQuery? (isDeleted ? 1 : 0):isDeleted;

    return map;
  }

  Respuestaopcionsimple.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.OpcionId = o["OpcionId"];
    this.RespuestaId = o["RespuestaId"];
    this.isDeleted = o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return[id,OpcionId,RespuestaId,isDeleted];
  }


  static fromWebUrl(String url, VoidCallback  respuestaopcionsimpleList (List<Respuestaopcionsimple> o)) async {
    var objList = List<Respuestaopcionsimple>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((respuestaopcionsimple) => Respuestaopcionsimple.fromMap(respuestaopcionsimple)).toList();
        respuestaopcionsimpleList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Respuestaopcionsimple.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Respuestaopcionsimple>> fromObjectList(Future<List<dynamic>> o) async {
    var respuestaopcionsimplesList = new List<Respuestaopcionsimple>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        respuestaopcionsimplesList.add(Respuestaopcionsimple.fromMap(data[i]));
      }
    });
    return respuestaopcionsimplesList;
  }

  static List<Respuestaopcionsimple> fromMapList(List<Map<String, dynamic>> query) {
    List<Respuestaopcionsimple> respuestaopcionsimples = List<Respuestaopcionsimple>();
    for (Map map in query) {
      respuestaopcionsimples.add(Respuestaopcionsimple.fromMap(map));
    }
    return respuestaopcionsimples;
  }

  /// returns Respuestaopcionsimple by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Respuestaopcionsimple if exist, otherwise returns null</returns>
  getById(int id, VoidCallback respuestaopcionsimple(Respuestaopcionsimple o)) {
    Respuestaopcionsimple respuestaopcionsimpleObj;
    var respuestaopcionsimpleFuture = _mnRespuestaopcionsimple.getById(id);
    respuestaopcionsimpleFuture.then((data) {
      if (data.length > 0)
        respuestaopcionsimpleObj = Respuestaopcionsimple.fromMap(data[0]);
      else
        respuestaopcionsimpleObj = null;
      respuestaopcionsimple(respuestaopcionsimpleObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnRespuestaopcionsimple.insert(
          Respuestaopcionsimple.withFields(OpcionId,RespuestaId,isDeleted));
    else
      id= await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Respuestaopcionsimple> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Respuestaopcionsimple> respuestaopcionsimples) async {
    var results = _mnRespuestaopcionsimple.saveAll("INSERT OR REPLACE INTO RespuestaOpcionSimple (id, OpcionId,RespuestaId,isDeleted)  VALUES (?,?,?,?)",respuestaopcionsimples);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnRespuestaopcionsimple.rawInsert(
        "INSERT OR REPLACE INTO RespuestaOpcionSimple (id, OpcionId,RespuestaId,isDeleted)  VALUES (?,?,?,?)", [id,OpcionId,RespuestaId,isDeleted]);
    return id;
  }


  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Respuestaopcionsimple> respuestaopcionsimples) async {
    var results = await _mnRespuestaopcionsimple.rawInsertAll(
        "INSERT OR REPLACE INTO RespuestaOpcionSimple (id, OpcionId,RespuestaId,isDeleted)  VALUES (?,?,?,?)", respuestaopcionsimples);
    return results;
  }


  /// <summary>
  /// saveAs Respuestaopcionsimple. Returns a new Primary Key value of Respuestaopcionsimple
  /// </summary>
  /// <returns>Returns a new Primary Key value of Respuestaopcionsimple</returns>
  Future<int> saveAs() async {
    id = await _mnRespuestaopcionsimple.insert(
        Respuestaopcionsimple.withFields(OpcionId,RespuestaId,isDeleted));
    return id;
  }


  /// <summary>
  /// Deletes Respuestaopcionsimple
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Respuestaopcionsimple invoked (id=$id)");
    if (!_softDeleteActivated)
      return _mnRespuestaopcionsimple.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnRespuestaopcionsimple.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }
  /// <summary>
  /// Recover Product
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Respuestaopcionsimple invoked (id=$id)");  return _mnRespuestaopcionsimple.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});  }
  //private RespuestaopcionsimpleFilterBuilder _Select;
  RespuestaopcionsimpleFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new RespuestaopcionsimpleFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted==true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  RespuestaopcionsimpleFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    RespuestaopcionsimpleFilterBuilder _distinct = new RespuestaopcionsimpleFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted==true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if(OpcionId==null) OpcionId=0;
    if(RespuestaId==null) RespuestaId=0;
    if(isDeleted==null) isDeleted=false;
  }
//end methods
}
// endregion respuestaopcionsimple


// region RespuestaopcionsimpleField
class RespuestaopcionsimpleField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  RespuestaopcionsimpleFilterBuilder respuestaopcionsimpleFB;
  RespuestaopcionsimpleField(RespuestaopcionsimpleFilterBuilder fb) {
    param = new DbParameter();
    respuestaopcionsimpleFB = fb;
  }

  RespuestaopcionsimpleField get not {
    _waitingNot = " NOT ";
    return this;
  }

  RespuestaopcionsimpleFilterBuilder equals(var pValue) {
    param.expression = "=";
    respuestaopcionsimpleFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaopcionsimpleFB.parameters, param, SqlSyntax.EQuals,
        respuestaopcionsimpleFB._addedBlocks)
        : setCriteria(pValue, respuestaopcionsimpleFB.parameters, param, SqlSyntax.NotEQuals,
        respuestaopcionsimpleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionsimpleFB._addedBlocks.needEndBlock[respuestaopcionsimpleFB._blockIndex] =
        respuestaopcionsimpleFB._addedBlocks.retVal;
    return respuestaopcionsimpleFB;
  }

  RespuestaopcionsimpleFilterBuilder isNull() {
    respuestaopcionsimpleFB._addedBlocks = setCriteria(
        0,
        respuestaopcionsimpleFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaopcionsimpleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionsimpleFB._addedBlocks.needEndBlock[respuestaopcionsimpleFB._blockIndex] =
        respuestaopcionsimpleFB._addedBlocks.retVal;
    return respuestaopcionsimpleFB;
  }

  RespuestaopcionsimpleFilterBuilder contains(dynamic pValue) {
    respuestaopcionsimpleFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        respuestaopcionsimpleFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaopcionsimpleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionsimpleFB._addedBlocks.needEndBlock[respuestaopcionsimpleFB._blockIndex] =
        respuestaopcionsimpleFB._addedBlocks.retVal;
    return respuestaopcionsimpleFB;
  }

  RespuestaopcionsimpleFilterBuilder startsWith(dynamic pValue) {
    respuestaopcionsimpleFB._addedBlocks = setCriteria(
        pValue + "%",
        respuestaopcionsimpleFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaopcionsimpleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionsimpleFB._addedBlocks.needEndBlock[respuestaopcionsimpleFB._blockIndex] =
        respuestaopcionsimpleFB._addedBlocks.retVal;
    respuestaopcionsimpleFB._addedBlocks.needEndBlock[respuestaopcionsimpleFB._blockIndex] =
        respuestaopcionsimpleFB._addedBlocks.retVal;
    return respuestaopcionsimpleFB;
  }

  RespuestaopcionsimpleFilterBuilder endsWith(dynamic pValue) {
    respuestaopcionsimpleFB._addedBlocks = setCriteria(
        "%" + pValue,
        respuestaopcionsimpleFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaopcionsimpleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionsimpleFB._addedBlocks.needEndBlock[respuestaopcionsimpleFB._blockIndex] =
        respuestaopcionsimpleFB._addedBlocks.retVal;
    return respuestaopcionsimpleFB;
  }

  RespuestaopcionsimpleFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      respuestaopcionsimpleFB._addedBlocks = setCriteria(
          pFirst,
          respuestaopcionsimpleFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          respuestaopcionsimpleFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        respuestaopcionsimpleFB._addedBlocks = setCriteria(pFirst, respuestaopcionsimpleFB.parameters,
            param, SqlSyntax.LessThan, respuestaopcionsimpleFB._addedBlocks);
      else
        respuestaopcionsimpleFB._addedBlocks = setCriteria(pFirst, respuestaopcionsimpleFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, respuestaopcionsimpleFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        respuestaopcionsimpleFB._addedBlocks = setCriteria(pLast, respuestaopcionsimpleFB.parameters, param,
            SqlSyntax.GreaterThan, respuestaopcionsimpleFB._addedBlocks);
      else
        respuestaopcionsimpleFB._addedBlocks = setCriteria(pLast, respuestaopcionsimpleFB.parameters, param,
            SqlSyntax.LessThanOrEquals, respuestaopcionsimpleFB._addedBlocks);
    }
    _waitingNot = "";
    respuestaopcionsimpleFB._addedBlocks.needEndBlock[respuestaopcionsimpleFB._blockIndex] =
        respuestaopcionsimpleFB._addedBlocks.retVal;
    return respuestaopcionsimpleFB;
  }

  RespuestaopcionsimpleFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    respuestaopcionsimpleFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaopcionsimpleFB.parameters, param,
        SqlSyntax.GreaterThan, respuestaopcionsimpleFB._addedBlocks)
        : setCriteria(pValue, respuestaopcionsimpleFB.parameters, param,
        SqlSyntax.LessThanOrEquals, respuestaopcionsimpleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionsimpleFB._addedBlocks.needEndBlock[respuestaopcionsimpleFB._blockIndex] =
        respuestaopcionsimpleFB._addedBlocks.retVal;
    return respuestaopcionsimpleFB;
  }

  RespuestaopcionsimpleFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    respuestaopcionsimpleFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaopcionsimpleFB.parameters, param, SqlSyntax.LessThan,
        respuestaopcionsimpleFB._addedBlocks)
        : setCriteria(pValue, respuestaopcionsimpleFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, respuestaopcionsimpleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionsimpleFB._addedBlocks.needEndBlock[respuestaopcionsimpleFB._blockIndex] =
        respuestaopcionsimpleFB._addedBlocks.retVal;
    return respuestaopcionsimpleFB;
  }

  RespuestaopcionsimpleFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    respuestaopcionsimpleFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaopcionsimpleFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, respuestaopcionsimpleFB._addedBlocks)
        : setCriteria(pValue, respuestaopcionsimpleFB.parameters, param, SqlSyntax.LessThan,
        respuestaopcionsimpleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionsimpleFB._addedBlocks.needEndBlock[respuestaopcionsimpleFB._blockIndex] =
        respuestaopcionsimpleFB._addedBlocks.retVal;
    return respuestaopcionsimpleFB;
  }

  RespuestaopcionsimpleFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    respuestaopcionsimpleFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaopcionsimpleFB.parameters, param,
        SqlSyntax.LessThanOrEquals, respuestaopcionsimpleFB._addedBlocks)
        : setCriteria(pValue, respuestaopcionsimpleFB.parameters, param,
        SqlSyntax.GreaterThan, respuestaopcionsimpleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionsimpleFB._addedBlocks.needEndBlock[respuestaopcionsimpleFB._blockIndex] =
        respuestaopcionsimpleFB._addedBlocks.retVal;
    return respuestaopcionsimpleFB;
  }

  RespuestaopcionsimpleFilterBuilder inValues(var pValue) {
    respuestaopcionsimpleFB._addedBlocks = setCriteria(
        pValue,
        respuestaopcionsimpleFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaopcionsimpleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionsimpleFB._addedBlocks.needEndBlock[respuestaopcionsimpleFB._blockIndex] =
        respuestaopcionsimpleFB._addedBlocks.retVal;
    return respuestaopcionsimpleFB;
  }
}
// endregion RespuestaopcionsimpleField

// region RespuestaopcionsimpleFilterBuilder
class RespuestaopcionsimpleFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Respuestaopcionsimple _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  RespuestaopcionsimpleFilterBuilder(Respuestaopcionsimple obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  RespuestaopcionsimpleFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  RespuestaopcionsimpleFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  RespuestaopcionsimpleFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  RespuestaopcionsimpleFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  RespuestaopcionsimpleFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  RespuestaopcionsimpleFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  RespuestaopcionsimpleFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  RespuestaopcionsimpleFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  RespuestaopcionsimpleFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  RespuestaopcionsimpleFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  RespuestaopcionsimpleField setField(RespuestaopcionsimpleField field, String colName, DbType dbtype) {
    field = new RespuestaopcionsimpleField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  RespuestaopcionsimpleField _id;
  RespuestaopcionsimpleField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }
  RespuestaopcionsimpleField _OpcionId;
  RespuestaopcionsimpleField get OpcionId {
    _OpcionId = setField(_OpcionId, "OpcionId", DbType.integer);
    return _OpcionId;
  }
  RespuestaopcionsimpleField _RespuestaId;
  RespuestaopcionsimpleField get RespuestaId {
    _RespuestaId = setField(_RespuestaId, "RespuestaId", DbType.integer);
    return _RespuestaId;
  }
  RespuestaopcionsimpleField _isDeleted;
  RespuestaopcionsimpleField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }


  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Respuestaopcionsimple._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }


  /// <summary>
  /// Deletes List<Respuestaopcionsimple> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r= BoolResult();
    if(Respuestaopcionsimple._softDeleteActivated)
      r = await _obj._mnRespuestaopcionsimple.updateBatch(qparams,{"isDeleted":1});
    else
      r = await _obj._mnRespuestaopcionsimple.delete(qparams);
    return r;
  }
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Respuestaopcionsimple batch invoked");            return _obj._mnRespuestaopcionsimple.updateBatch(qparams,{"isDeleted":0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnRespuestaopcionsimple.updateBatch(qparams, values);
  }

  /// This method always returns RespuestaopcionsimpleObj if exist, otherwise returns null
  /// <returns>List<Respuestaopcionsimple></returns>
  void toSingle(VoidCallback respuestaopcionsimple(Respuestaopcionsimple o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnRespuestaopcionsimple.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        respuestaopcionsimple(Respuestaopcionsimple.fromMap(data[0]));
      else
        respuestaopcionsimple(null);
    });
  }


  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback respuestaopcionsimpleCount (int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var respuestaopcionsimplesFuture = await _obj._mnRespuestaopcionsimple.toList(qparams);
    int count = respuestaopcionsimplesFuture[0]["CNT"];
    respuestaopcionsimpleCount (count);
    return BoolResult(success:count>0, successMessage: count>0? "toCount(): $count items found":"", errorMessage: count>0?"": "toCount(): no items found");
  }

  /// This method always returns List<Respuestaopcionsimple>.
  /// <returns>List<Respuestaopcionsimple></returns>
  void toList(VoidCallback respuestaopcionsimpleList (List<Respuestaopcionsimple> o)) async {

    _buildParameters();

    var respuestaopcionsimplesFuture = _obj._mnRespuestaopcionsimple.toList(qparams);

    List<Respuestaopcionsimple> respuestaopcionsimplesData = new List<Respuestaopcionsimple>();
    respuestaopcionsimplesFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        respuestaopcionsimplesData.add(Respuestaopcionsimple.fromMap(data[i]));
      }
      respuestaopcionsimpleList (respuestaopcionsimplesData);
      respuestaopcionsimplesData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList (List<int> o),
      [bool buildParameters=true]) async {
    if(buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns= ["id"];
    var idFuture = await _obj._mnRespuestaopcionsimple.toList(qparams);


    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList (idData);
    return idData;

  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnRespuestaopcionsimple.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });


  }

}
// endregion RespuestaopcionsimpleFilterBuilder




// region RespuestaopcionsimpleFields
class RespuestaopcionsimpleFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fOpcionId;
  static TableField get OpcionId {
    _fOpcionId = SqlSyntax.setField(_fOpcionId, "OpcionId", DbType.integer);
    return _fOpcionId;
  }
  static TableField _fRespuestaId;
  static TableField get RespuestaId {
    _fRespuestaId = SqlSyntax.setField(_fRespuestaId, "RespuestaId", DbType.integer);
    return _fRespuestaId;
  }
  static TableField _fIsDeleted;
  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }

}
// endregion RespuestaopcionsimpleFields

//region RespuestaopcionsimpleManager
class RespuestaopcionsimpleManager extends SqfEntityProvider {
  static String _tableName = "RespuestaOpcionSimple";
  static String _colId = "id";

  RespuestaopcionsimpleManager():super(DbModel(),tableName: _tableName, colId: _colId);
}
//endregion RespuestaopcionsimpleManager


/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import Respuestaopcionmultiple.dart into where to use
      - start typing Respuestaopcionmultiple().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(respuestaopcionmultiple) / or toList(respuestaopcionmultipleList)
      - you can select one Respuestaopcionmultiple or List<Respuestaopcionmultiple> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Respuestaopcionmultiple
class Respuestaopcionmultiple {
  // FIELDS
  int id;
  int RespuestaId;
  bool isDeleted;
  // end FIELDS

// RELATIONSHIPS
  getRespuesta(VoidCallback respuesta(Respuesta o)) {
    Respuesta().getById(RespuestaId, (obj) {
      respuesta(obj);
    });
  }
  // END RELATIONSHIPS


// COLLECTIONS
  getRespuestaopcionrespuestas(VoidCallback respuestaopcionrespuestaList(List<Opcionrespuesta> o)) {
    Opcionrespuesta().select().RespuestaOpcionMultipleId.equals(id).toList((objList) {
      respuestaopcionrespuestaList(objList);
    });
  }
  // END COLLECTIONS

  static const bool _softDeleteActivated=true;
  RespuestaopcionmultipleManager __mnRespuestaopcionmultiple;
  RespuestaopcionmultipleFilterBuilder _select;

  RespuestaopcionmultipleManager get _mnRespuestaopcionmultiple {
    if (__mnRespuestaopcionmultiple == null) __mnRespuestaopcionmultiple = new RespuestaopcionmultipleManager();
    return __mnRespuestaopcionmultiple;
  }

  Respuestaopcionmultiple({this.id, this.RespuestaId,this.isDeleted}) { setDefaultValues();}
  Respuestaopcionmultiple.withFields(this.RespuestaId,this.isDeleted){ setDefaultValues();}
  Respuestaopcionmultiple.withId(this.id, this.RespuestaId,this.isDeleted){ setDefaultValues();}

  // methods
  Map<String, dynamic> toMap({bool forQuery=false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;    if (RespuestaId != null) map["RespuestaId"] = RespuestaId;
    if (isDeleted != null) map["isDeleted"] = forQuery? (isDeleted ? 1 : 0):isDeleted;

    return map;
  }

  Respuestaopcionmultiple.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.RespuestaId = o["RespuestaId"];
    this.isDeleted = o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return[id,RespuestaId,isDeleted];
  }


  static fromWebUrl(String url, VoidCallback  respuestaopcionmultipleList (List<Respuestaopcionmultiple> o)) async {
    var objList = List<Respuestaopcionmultiple>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((respuestaopcionmultiple) => Respuestaopcionmultiple.fromMap(respuestaopcionmultiple)).toList();
        respuestaopcionmultipleList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Respuestaopcionmultiple.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Respuestaopcionmultiple>> fromObjectList(Future<List<dynamic>> o) async {
    var respuestaopcionmultiplesList = new List<Respuestaopcionmultiple>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        respuestaopcionmultiplesList.add(Respuestaopcionmultiple.fromMap(data[i]));
      }
    });
    return respuestaopcionmultiplesList;
  }

  static List<Respuestaopcionmultiple> fromMapList(List<Map<String, dynamic>> query) {
    List<Respuestaopcionmultiple> respuestaopcionmultiples = List<Respuestaopcionmultiple>();
    for (Map map in query) {
      respuestaopcionmultiples.add(Respuestaopcionmultiple.fromMap(map));
    }
    return respuestaopcionmultiples;
  }

  /// returns Respuestaopcionmultiple by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Respuestaopcionmultiple if exist, otherwise returns null</returns>
  getById(int id, VoidCallback respuestaopcionmultiple(Respuestaopcionmultiple o)) {
    Respuestaopcionmultiple respuestaopcionmultipleObj;
    var respuestaopcionmultipleFuture = _mnRespuestaopcionmultiple.getById(id);
    respuestaopcionmultipleFuture.then((data) {
      if (data.length > 0)
        respuestaopcionmultipleObj = Respuestaopcionmultiple.fromMap(data[0]);
      else
        respuestaopcionmultipleObj = null;
      respuestaopcionmultiple(respuestaopcionmultipleObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnRespuestaopcionmultiple.insert(
          Respuestaopcionmultiple.withFields(RespuestaId,isDeleted));
    else
      id= await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Respuestaopcionmultiple> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Respuestaopcionmultiple> respuestaopcionmultiples) async {
    var results = _mnRespuestaopcionmultiple.saveAll("INSERT OR REPLACE INTO RespuestaOpcionMultiple (id, RespuestaId,isDeleted)  VALUES (?,?,?)",respuestaopcionmultiples);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnRespuestaopcionmultiple.rawInsert(
        "INSERT OR REPLACE INTO RespuestaOpcionMultiple (id, RespuestaId,isDeleted)  VALUES (?,?,?)", [id,RespuestaId,isDeleted]);
    return id;
  }


  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Respuestaopcionmultiple> respuestaopcionmultiples) async {
    var results = await _mnRespuestaopcionmultiple.rawInsertAll(
        "INSERT OR REPLACE INTO RespuestaOpcionMultiple (id, RespuestaId,isDeleted)  VALUES (?,?,?)", respuestaopcionmultiples);
    return results;
  }


  /// <summary>
  /// saveAs Respuestaopcionmultiple. Returns a new Primary Key value of Respuestaopcionmultiple
  /// </summary>
  /// <returns>Returns a new Primary Key value of Respuestaopcionmultiple</returns>
  Future<int> saveAs() async {
    id = await _mnRespuestaopcionmultiple.insert(
        Respuestaopcionmultiple.withFields(RespuestaId,isDeleted));
    return id;
  }


  /// <summary>
  /// Deletes Respuestaopcionmultiple
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Respuestaopcionmultiple invoked (id=$id)");
    var result= BoolResult();  result = await Opcionrespuesta().select().RespuestaOpcionMultipleId.equals(id).delete();
    if (!result.success) return result;
    else
    if (!_softDeleteActivated)
      return _mnRespuestaopcionmultiple.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnRespuestaopcionmultiple.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }
  /// <summary>
  /// Recover Product
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Respuestaopcionmultiple invoked (id=$id)");var result= BoolResult();  result = await Opcionrespuesta().select(getIsDeleted: true).isDeleted.equals(true).and.RespuestaOpcionMultipleId.equals(id).update({"isDeleted": 0});
    if (!result.success) return result;
    else  return _mnRespuestaopcionmultiple.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});  }
  //private RespuestaopcionmultipleFilterBuilder _Select;
  RespuestaopcionmultipleFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new RespuestaopcionmultipleFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted==true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  RespuestaopcionmultipleFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    RespuestaopcionmultipleFilterBuilder _distinct = new RespuestaopcionmultipleFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted==true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if(RespuestaId==null) RespuestaId=0;
    if(isDeleted==null) isDeleted=false;
  }
//end methods
}
// endregion respuestaopcionmultiple


// region RespuestaopcionmultipleField
class RespuestaopcionmultipleField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  RespuestaopcionmultipleFilterBuilder respuestaopcionmultipleFB;
  RespuestaopcionmultipleField(RespuestaopcionmultipleFilterBuilder fb) {
    param = new DbParameter();
    respuestaopcionmultipleFB = fb;
  }

  RespuestaopcionmultipleField get not {
    _waitingNot = " NOT ";
    return this;
  }

  RespuestaopcionmultipleFilterBuilder equals(var pValue) {
    param.expression = "=";
    respuestaopcionmultipleFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaopcionmultipleFB.parameters, param, SqlSyntax.EQuals,
        respuestaopcionmultipleFB._addedBlocks)
        : setCriteria(pValue, respuestaopcionmultipleFB.parameters, param, SqlSyntax.NotEQuals,
        respuestaopcionmultipleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionmultipleFB._addedBlocks.needEndBlock[respuestaopcionmultipleFB._blockIndex] =
        respuestaopcionmultipleFB._addedBlocks.retVal;
    return respuestaopcionmultipleFB;
  }

  RespuestaopcionmultipleFilterBuilder isNull() {
    respuestaopcionmultipleFB._addedBlocks = setCriteria(
        0,
        respuestaopcionmultipleFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaopcionmultipleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionmultipleFB._addedBlocks.needEndBlock[respuestaopcionmultipleFB._blockIndex] =
        respuestaopcionmultipleFB._addedBlocks.retVal;
    return respuestaopcionmultipleFB;
  }

  RespuestaopcionmultipleFilterBuilder contains(dynamic pValue) {
    respuestaopcionmultipleFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        respuestaopcionmultipleFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaopcionmultipleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionmultipleFB._addedBlocks.needEndBlock[respuestaopcionmultipleFB._blockIndex] =
        respuestaopcionmultipleFB._addedBlocks.retVal;
    return respuestaopcionmultipleFB;
  }

  RespuestaopcionmultipleFilterBuilder startsWith(dynamic pValue) {
    respuestaopcionmultipleFB._addedBlocks = setCriteria(
        pValue + "%",
        respuestaopcionmultipleFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaopcionmultipleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionmultipleFB._addedBlocks.needEndBlock[respuestaopcionmultipleFB._blockIndex] =
        respuestaopcionmultipleFB._addedBlocks.retVal;
    respuestaopcionmultipleFB._addedBlocks.needEndBlock[respuestaopcionmultipleFB._blockIndex] =
        respuestaopcionmultipleFB._addedBlocks.retVal;
    return respuestaopcionmultipleFB;
  }

  RespuestaopcionmultipleFilterBuilder endsWith(dynamic pValue) {
    respuestaopcionmultipleFB._addedBlocks = setCriteria(
        "%" + pValue,
        respuestaopcionmultipleFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaopcionmultipleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionmultipleFB._addedBlocks.needEndBlock[respuestaopcionmultipleFB._blockIndex] =
        respuestaopcionmultipleFB._addedBlocks.retVal;
    return respuestaopcionmultipleFB;
  }

  RespuestaopcionmultipleFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      respuestaopcionmultipleFB._addedBlocks = setCriteria(
          pFirst,
          respuestaopcionmultipleFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          respuestaopcionmultipleFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        respuestaopcionmultipleFB._addedBlocks = setCriteria(pFirst, respuestaopcionmultipleFB.parameters,
            param, SqlSyntax.LessThan, respuestaopcionmultipleFB._addedBlocks);
      else
        respuestaopcionmultipleFB._addedBlocks = setCriteria(pFirst, respuestaopcionmultipleFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, respuestaopcionmultipleFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        respuestaopcionmultipleFB._addedBlocks = setCriteria(pLast, respuestaopcionmultipleFB.parameters, param,
            SqlSyntax.GreaterThan, respuestaopcionmultipleFB._addedBlocks);
      else
        respuestaopcionmultipleFB._addedBlocks = setCriteria(pLast, respuestaopcionmultipleFB.parameters, param,
            SqlSyntax.LessThanOrEquals, respuestaopcionmultipleFB._addedBlocks);
    }
    _waitingNot = "";
    respuestaopcionmultipleFB._addedBlocks.needEndBlock[respuestaopcionmultipleFB._blockIndex] =
        respuestaopcionmultipleFB._addedBlocks.retVal;
    return respuestaopcionmultipleFB;
  }

  RespuestaopcionmultipleFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    respuestaopcionmultipleFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaopcionmultipleFB.parameters, param,
        SqlSyntax.GreaterThan, respuestaopcionmultipleFB._addedBlocks)
        : setCriteria(pValue, respuestaopcionmultipleFB.parameters, param,
        SqlSyntax.LessThanOrEquals, respuestaopcionmultipleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionmultipleFB._addedBlocks.needEndBlock[respuestaopcionmultipleFB._blockIndex] =
        respuestaopcionmultipleFB._addedBlocks.retVal;
    return respuestaopcionmultipleFB;
  }

  RespuestaopcionmultipleFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    respuestaopcionmultipleFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaopcionmultipleFB.parameters, param, SqlSyntax.LessThan,
        respuestaopcionmultipleFB._addedBlocks)
        : setCriteria(pValue, respuestaopcionmultipleFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, respuestaopcionmultipleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionmultipleFB._addedBlocks.needEndBlock[respuestaopcionmultipleFB._blockIndex] =
        respuestaopcionmultipleFB._addedBlocks.retVal;
    return respuestaopcionmultipleFB;
  }

  RespuestaopcionmultipleFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    respuestaopcionmultipleFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaopcionmultipleFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, respuestaopcionmultipleFB._addedBlocks)
        : setCriteria(pValue, respuestaopcionmultipleFB.parameters, param, SqlSyntax.LessThan,
        respuestaopcionmultipleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionmultipleFB._addedBlocks.needEndBlock[respuestaopcionmultipleFB._blockIndex] =
        respuestaopcionmultipleFB._addedBlocks.retVal;
    return respuestaopcionmultipleFB;
  }

  RespuestaopcionmultipleFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    respuestaopcionmultipleFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaopcionmultipleFB.parameters, param,
        SqlSyntax.LessThanOrEquals, respuestaopcionmultipleFB._addedBlocks)
        : setCriteria(pValue, respuestaopcionmultipleFB.parameters, param,
        SqlSyntax.GreaterThan, respuestaopcionmultipleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionmultipleFB._addedBlocks.needEndBlock[respuestaopcionmultipleFB._blockIndex] =
        respuestaopcionmultipleFB._addedBlocks.retVal;
    return respuestaopcionmultipleFB;
  }

  RespuestaopcionmultipleFilterBuilder inValues(var pValue) {
    respuestaopcionmultipleFB._addedBlocks = setCriteria(
        pValue,
        respuestaopcionmultipleFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaopcionmultipleFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionmultipleFB._addedBlocks.needEndBlock[respuestaopcionmultipleFB._blockIndex] =
        respuestaopcionmultipleFB._addedBlocks.retVal;
    return respuestaopcionmultipleFB;
  }
}
// endregion RespuestaopcionmultipleField

// region RespuestaopcionmultipleFilterBuilder
class RespuestaopcionmultipleFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Respuestaopcionmultiple _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  RespuestaopcionmultipleFilterBuilder(Respuestaopcionmultiple obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  RespuestaopcionmultipleFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  RespuestaopcionmultipleFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  RespuestaopcionmultipleFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  RespuestaopcionmultipleFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  RespuestaopcionmultipleFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  RespuestaopcionmultipleFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  RespuestaopcionmultipleFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  RespuestaopcionmultipleFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  RespuestaopcionmultipleFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  RespuestaopcionmultipleFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  RespuestaopcionmultipleField setField(RespuestaopcionmultipleField field, String colName, DbType dbtype) {
    field = new RespuestaopcionmultipleField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  RespuestaopcionmultipleField _id;
  RespuestaopcionmultipleField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }
  RespuestaopcionmultipleField _RespuestaId;
  RespuestaopcionmultipleField get RespuestaId {
    _RespuestaId = setField(_RespuestaId, "RespuestaId", DbType.integer);
    return _RespuestaId;
  }
  RespuestaopcionmultipleField _isDeleted;
  RespuestaopcionmultipleField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }


  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Respuestaopcionmultiple._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }


  /// <summary>
  /// Deletes List<Respuestaopcionmultiple> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r= BoolResult();    toListPrimaryKey((idList){
      Opcionrespuesta().select().RespuestaOpcionMultipleId.inValues(idList).delete();
    }, false);

    if(Respuestaopcionmultiple._softDeleteActivated)
      r = await _obj._mnRespuestaopcionmultiple.updateBatch(qparams,{"isDeleted":1});
    else
      r = await _obj._mnRespuestaopcionmultiple.delete(qparams);
    return r;
  }
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Respuestaopcionmultiple batch invoked");      toListPrimaryKey((idList){
      Opcionrespuesta().select(getIsDeleted: true).isDeleted.equals(true).and.RespuestaOpcionMultipleId.inValues(idList).update({"isDeleted": 0});
    }, false);
    return _obj._mnRespuestaopcionmultiple.updateBatch(qparams,{"isDeleted":0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnRespuestaopcionmultiple.updateBatch(qparams, values);
  }

  /// This method always returns RespuestaopcionmultipleObj if exist, otherwise returns null
  /// <returns>List<Respuestaopcionmultiple></returns>
  void toSingle(VoidCallback respuestaopcionmultiple(Respuestaopcionmultiple o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnRespuestaopcionmultiple.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        respuestaopcionmultiple(Respuestaopcionmultiple.fromMap(data[0]));
      else
        respuestaopcionmultiple(null);
    });
  }


  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback respuestaopcionmultipleCount (int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var respuestaopcionmultiplesFuture = await _obj._mnRespuestaopcionmultiple.toList(qparams);
    int count = respuestaopcionmultiplesFuture[0]["CNT"];
    respuestaopcionmultipleCount (count);
    return BoolResult(success:count>0, successMessage: count>0? "toCount(): $count items found":"", errorMessage: count>0?"": "toCount(): no items found");
  }

  /// This method always returns List<Respuestaopcionmultiple>.
  /// <returns>List<Respuestaopcionmultiple></returns>
  void toList(VoidCallback respuestaopcionmultipleList (List<Respuestaopcionmultiple> o)) async {

    _buildParameters();

    var respuestaopcionmultiplesFuture = _obj._mnRespuestaopcionmultiple.toList(qparams);

    List<Respuestaopcionmultiple> respuestaopcionmultiplesData = new List<Respuestaopcionmultiple>();
    respuestaopcionmultiplesFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        respuestaopcionmultiplesData.add(Respuestaopcionmultiple.fromMap(data[i]));
      }
      respuestaopcionmultipleList (respuestaopcionmultiplesData);
      respuestaopcionmultiplesData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList (List<int> o),
      [bool buildParameters=true]) async {
    if(buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns= ["id"];
    var idFuture = await _obj._mnRespuestaopcionmultiple.toList(qparams);


    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList (idData);
    return idData;

  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnRespuestaopcionmultiple.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });


  }

}
// endregion RespuestaopcionmultipleFilterBuilder




// region RespuestaopcionmultipleFields
class RespuestaopcionmultipleFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fRespuestaId;
  static TableField get RespuestaId {
    _fRespuestaId = SqlSyntax.setField(_fRespuestaId, "RespuestaId", DbType.integer);
    return _fRespuestaId;
  }
  static TableField _fIsDeleted;
  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }

}
// endregion RespuestaopcionmultipleFields

//region RespuestaopcionmultipleManager
class RespuestaopcionmultipleManager extends SqfEntityProvider {
  static String _tableName = "RespuestaOpcionMultiple";
  static String _colId = "id";

  RespuestaopcionmultipleManager():super(DbModel(),tableName: _tableName, colId: _colId);
}
//endregion RespuestaopcionmultipleManager


/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following:
      - import Respuestaopcionrespuesta.dart into where to use
      - start typing Respuestaopcionrespuesta().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(respuestaopcionrespuesta) / or toList(respuestaopcionrespuestaList)
      - you can select one Respuestaopcionrespuesta or List<Respuestaopcionrespuesta> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Respuestaopcionrespuesta
class Opcionrespuesta {
  // FIELDS
  int id;
  int RespuestaOpcionMultipleId;
  int OpcionId;
  bool isDeleted;
  // end FIELDS

// RELATIONSHIPS
  getRespuestaopcionmultiple(VoidCallback respuestaopcionmultiple(Respuestaopcionmultiple o)) {
    Respuestaopcionmultiple().getById(RespuestaOpcionMultipleId, (obj) {
      respuestaopcionmultiple(obj);
    });
  }
  getOpcion(VoidCallback opcion(Opcion o)) {
    Opcion().getById(OpcionId, (obj) {
      opcion(obj);
    });
  }
  // END RELATIONSHIPS


  static const bool _softDeleteActivated=true;
  RespuestaopcionrespuestaManager __mnRespuestaopcionrespuesta;
  RespuestaopcionrespuestaFilterBuilder _select;

  RespuestaopcionrespuestaManager get _mnRespuestaopcionrespuesta {
    if (__mnRespuestaopcionrespuesta == null) __mnRespuestaopcionrespuesta = new RespuestaopcionrespuestaManager();
    return __mnRespuestaopcionrespuesta;
  }

  Opcionrespuesta({this.id, this.RespuestaOpcionMultipleId,this.OpcionId,this.isDeleted}) { setDefaultValues();}
  Opcionrespuesta.withFields(this.RespuestaOpcionMultipleId,this.OpcionId,this.isDeleted){ setDefaultValues();}
  Opcionrespuesta.withId(this.id, this.RespuestaOpcionMultipleId,this.OpcionId,this.isDeleted){ setDefaultValues();}

  // methods
  Map<String, dynamic> toMap({bool forQuery=false}) {
    var map = Map<String, dynamic>();
    if (id != null) map["id"] = id;    if (RespuestaOpcionMultipleId != null) map["RespuestaOpcionMultipleId"] = RespuestaOpcionMultipleId;
    if (OpcionId != null) map["OpcionId"] = OpcionId;
    if (isDeleted != null) map["isDeleted"] = forQuery? (isDeleted ? 1 : 0):isDeleted;

    return map;
  }

  Opcionrespuesta.fromMap(Map<String, dynamic> o) {
    this.id = o["id"];
    this.RespuestaOpcionMultipleId = o["RespuestaOpcionMultipleId"];
    this.OpcionId = o["OpcionId"];
    this.isDeleted = o["isDeleted"] != null ? o["isDeleted"] == 1 : null;
  }

  List<dynamic> toArgs() {
    return[id,RespuestaOpcionMultipleId,OpcionId,isDeleted];
  }


  static fromWebUrl(String url, VoidCallback  respuestaopcionrespuestaList (List<Opcionrespuesta> o)) async {
    var objList = List<Opcionrespuesta>();
    http.get(url).then((response) {
      Iterable list = json.decode(response.body);
      try {
        objList = list.map((respuestaopcionrespuesta) => Opcionrespuesta.fromMap(respuestaopcionrespuesta)).toList();
        respuestaopcionrespuestaList(objList);
      } catch (e) {
        print("SQFENTITY ERROR Respuestaopcionrespuesta.fromWeb: ErrorMessage:" + e.toString());
      }
    });
  }

  static Future<List<Opcionrespuesta>> fromObjectList(Future<List<dynamic>> o) async {
    var respuestaopcionrespuestasList = new List<Opcionrespuesta>();
    o.then((data) {
      for (int i = 0; i < data.length; i++) {
        respuestaopcionrespuestasList.add(Opcionrespuesta.fromMap(data[i]));
      }
    });
    return respuestaopcionrespuestasList;
  }

  static List<Opcionrespuesta> fromMapList(List<Map<String, dynamic>> query) {
    List<Opcionrespuesta> respuestaopcionrespuestas = List<Opcionrespuesta>();
    for (Map map in query) {
      respuestaopcionrespuestas.add(Opcionrespuesta.fromMap(map));
    }
    return respuestaopcionrespuestas;
  }

  /// returns Respuestaopcionrespuesta by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Respuestaopcionrespuesta if exist, otherwise returns null</returns>
  getById(int id, VoidCallback respuestaopcionrespuesta(Opcionrespuesta o)) {
    Opcionrespuesta respuestaopcionrespuestaObj;
    var respuestaopcionrespuestaFuture = _mnRespuestaopcionrespuesta.getById(id);
    respuestaopcionrespuestaFuture.then((data) {
      if (data.length > 0)
        respuestaopcionrespuestaObj = Opcionrespuesta.fromMap(data[0]);
      else
        respuestaopcionrespuestaObj = null;
      respuestaopcionrespuesta(respuestaopcionrespuestaObj);
    });
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0)
      id = await _mnRespuestaopcionrespuesta.insert(
          Opcionrespuesta.withFields(RespuestaOpcionMultipleId,OpcionId,isDeleted));
    else
      id= await _upsert();
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Respuestaopcionrespuesta> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Opcionrespuesta> respuestaopcionrespuestas) async {
    var results = _mnRespuestaopcionrespuesta.saveAll("INSERT OR REPLACE INTO RespuestaOpcionRespuesta (id, RespuestaOpcionMultipleId,OpcionId,isDeleted)  VALUES (?,?,?,?)",respuestaopcionrespuestas);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnRespuestaopcionrespuesta.rawInsert(
        "INSERT OR REPLACE INTO RespuestaOpcionRespuesta (id, RespuestaOpcionMultipleId,OpcionId,isDeleted)  VALUES (?,?,?,?)", [id,RespuestaOpcionMultipleId,OpcionId,isDeleted]);
    return id;
  }


  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Opcionrespuesta> respuestaopcionrespuestas) async {
    var results = await _mnRespuestaopcionrespuesta.rawInsertAll(
        "INSERT OR REPLACE INTO RespuestaOpcionRespuesta (id, RespuestaOpcionMultipleId,OpcionId,isDeleted)  VALUES (?,?,?,?)", respuestaopcionrespuestas);
    return results;
  }


  /// <summary>
  /// saveAs Respuestaopcionrespuesta. Returns a new Primary Key value of Respuestaopcionrespuesta
  /// </summary>
  /// <returns>Returns a new Primary Key value of Respuestaopcionrespuesta</returns>
  Future<int> saveAs() async {
    id = await _mnRespuestaopcionrespuesta.insert(
        Opcionrespuesta.withFields(RespuestaOpcionMultipleId,OpcionId,isDeleted));
    return id;
  }


  /// <summary>
  /// Deletes Respuestaopcionrespuesta
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    print("SQFENTITIY: delete Respuestaopcionrespuesta invoked (id=$id)");
    if (!_softDeleteActivated)
      return _mnRespuestaopcionrespuesta.delete(QueryParams(whereString: "id=$id"));
    else
      return _mnRespuestaopcionrespuesta.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
  }
  /// <summary>
  /// Recover Product
  /// </summary>
  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered</returns>
  Future<BoolResult> recover() async {
    print("SQFENTITIY: recover Respuestaopcionrespuesta invoked (id=$id)");  return _mnRespuestaopcionrespuesta.updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 0});  }
  //private RespuestaopcionrespuestaFilterBuilder _Select;
  RespuestaopcionrespuestaFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = new RespuestaopcionrespuestaFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted==true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  RespuestaopcionrespuestaFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    RespuestaopcionrespuestaFilterBuilder _distinct = new RespuestaopcionrespuestaFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted==true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {
    if(RespuestaOpcionMultipleId==null) RespuestaOpcionMultipleId=0;
    if(OpcionId==null) OpcionId=0;
    if(isDeleted==null) isDeleted=false;
  }
//end methods
}
// endregion respuestaopcionrespuesta


// region RespuestaopcionrespuestaField
class RespuestaopcionrespuestaField extends SearchCriteria {
  DbParameter param;
  String _waitingNot = "";
  RespuestaopcionrespuestaFilterBuilder respuestaopcionrespuestaFB;
  RespuestaopcionrespuestaField(RespuestaopcionrespuestaFilterBuilder fb) {
    param = new DbParameter();
    respuestaopcionrespuestaFB = fb;
  }

  RespuestaopcionrespuestaField get not {
    _waitingNot = " NOT ";
    return this;
  }

  RespuestaopcionrespuestaFilterBuilder equals(var pValue) {
    param.expression = "=";
    respuestaopcionrespuestaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaopcionrespuestaFB.parameters, param, SqlSyntax.EQuals,
        respuestaopcionrespuestaFB._addedBlocks)
        : setCriteria(pValue, respuestaopcionrespuestaFB.parameters, param, SqlSyntax.NotEQuals,
        respuestaopcionrespuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionrespuestaFB._addedBlocks.needEndBlock[respuestaopcionrespuestaFB._blockIndex] =
        respuestaopcionrespuestaFB._addedBlocks.retVal;
    return respuestaopcionrespuestaFB;
  }

  RespuestaopcionrespuestaFilterBuilder isNull() {
    respuestaopcionrespuestaFB._addedBlocks = setCriteria(
        0,
        respuestaopcionrespuestaFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaopcionrespuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionrespuestaFB._addedBlocks.needEndBlock[respuestaopcionrespuestaFB._blockIndex] =
        respuestaopcionrespuestaFB._addedBlocks.retVal;
    return respuestaopcionrespuestaFB;
  }

  RespuestaopcionrespuestaFilterBuilder contains(dynamic pValue) {
    respuestaopcionrespuestaFB._addedBlocks = setCriteria(
        "%" + pValue + "%",
        respuestaopcionrespuestaFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaopcionrespuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionrespuestaFB._addedBlocks.needEndBlock[respuestaopcionrespuestaFB._blockIndex] =
        respuestaopcionrespuestaFB._addedBlocks.retVal;
    return respuestaopcionrespuestaFB;
  }

  RespuestaopcionrespuestaFilterBuilder startsWith(dynamic pValue) {
    respuestaopcionrespuestaFB._addedBlocks = setCriteria(
        pValue + "%",
        respuestaopcionrespuestaFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaopcionrespuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionrespuestaFB._addedBlocks.needEndBlock[respuestaopcionrespuestaFB._blockIndex] =
        respuestaopcionrespuestaFB._addedBlocks.retVal;
    respuestaopcionrespuestaFB._addedBlocks.needEndBlock[respuestaopcionrespuestaFB._blockIndex] =
        respuestaopcionrespuestaFB._addedBlocks.retVal;
    return respuestaopcionrespuestaFB;
  }

  RespuestaopcionrespuestaFilterBuilder endsWith(dynamic pValue) {
    respuestaopcionrespuestaFB._addedBlocks = setCriteria(
        "%" + pValue,
        respuestaopcionrespuestaFB.parameters,
        param,
        SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaopcionrespuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionrespuestaFB._addedBlocks.needEndBlock[respuestaopcionrespuestaFB._blockIndex] =
        respuestaopcionrespuestaFB._addedBlocks.retVal;
    return respuestaopcionrespuestaFB;
  }

  RespuestaopcionrespuestaFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      respuestaopcionrespuestaFB._addedBlocks = setCriteria(
          pFirst,
          respuestaopcionrespuestaFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          respuestaopcionrespuestaFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "")
        respuestaopcionrespuestaFB._addedBlocks = setCriteria(pFirst, respuestaopcionrespuestaFB.parameters,
            param, SqlSyntax.LessThan, respuestaopcionrespuestaFB._addedBlocks);
      else
        respuestaopcionrespuestaFB._addedBlocks = setCriteria(pFirst, respuestaopcionrespuestaFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, respuestaopcionrespuestaFB._addedBlocks);
    } else if (pLast != null) {
      if (_waitingNot != "")
        respuestaopcionrespuestaFB._addedBlocks = setCriteria(pLast, respuestaopcionrespuestaFB.parameters, param,
            SqlSyntax.GreaterThan, respuestaopcionrespuestaFB._addedBlocks);
      else
        respuestaopcionrespuestaFB._addedBlocks = setCriteria(pLast, respuestaopcionrespuestaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, respuestaopcionrespuestaFB._addedBlocks);
    }
    _waitingNot = "";
    respuestaopcionrespuestaFB._addedBlocks.needEndBlock[respuestaopcionrespuestaFB._blockIndex] =
        respuestaopcionrespuestaFB._addedBlocks.retVal;
    return respuestaopcionrespuestaFB;
  }

  RespuestaopcionrespuestaFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    respuestaopcionrespuestaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaopcionrespuestaFB.parameters, param,
        SqlSyntax.GreaterThan, respuestaopcionrespuestaFB._addedBlocks)
        : setCriteria(pValue, respuestaopcionrespuestaFB.parameters, param,
        SqlSyntax.LessThanOrEquals, respuestaopcionrespuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionrespuestaFB._addedBlocks.needEndBlock[respuestaopcionrespuestaFB._blockIndex] =
        respuestaopcionrespuestaFB._addedBlocks.retVal;
    return respuestaopcionrespuestaFB;
  }

  RespuestaopcionrespuestaFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    respuestaopcionrespuestaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaopcionrespuestaFB.parameters, param, SqlSyntax.LessThan,
        respuestaopcionrespuestaFB._addedBlocks)
        : setCriteria(pValue, respuestaopcionrespuestaFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, respuestaopcionrespuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionrespuestaFB._addedBlocks.needEndBlock[respuestaopcionrespuestaFB._blockIndex] =
        respuestaopcionrespuestaFB._addedBlocks.retVal;
    return respuestaopcionrespuestaFB;
  }

  RespuestaopcionrespuestaFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    respuestaopcionrespuestaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaopcionrespuestaFB.parameters, param,
        SqlSyntax.GreaterThanOrEquals, respuestaopcionrespuestaFB._addedBlocks)
        : setCriteria(pValue, respuestaopcionrespuestaFB.parameters, param, SqlSyntax.LessThan,
        respuestaopcionrespuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionrespuestaFB._addedBlocks.needEndBlock[respuestaopcionrespuestaFB._blockIndex] =
        respuestaopcionrespuestaFB._addedBlocks.retVal;
    return respuestaopcionrespuestaFB;
  }

  RespuestaopcionrespuestaFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    respuestaopcionrespuestaFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, respuestaopcionrespuestaFB.parameters, param,
        SqlSyntax.LessThanOrEquals, respuestaopcionrespuestaFB._addedBlocks)
        : setCriteria(pValue, respuestaopcionrespuestaFB.parameters, param,
        SqlSyntax.GreaterThan, respuestaopcionrespuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionrespuestaFB._addedBlocks.needEndBlock[respuestaopcionrespuestaFB._blockIndex] =
        respuestaopcionrespuestaFB._addedBlocks.retVal;
    return respuestaopcionrespuestaFB;
  }

  RespuestaopcionrespuestaFilterBuilder inValues(var pValue) {
    respuestaopcionrespuestaFB._addedBlocks = setCriteria(
        pValue,
        respuestaopcionrespuestaFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        respuestaopcionrespuestaFB._addedBlocks);
    _waitingNot = "";
    respuestaopcionrespuestaFB._addedBlocks.needEndBlock[respuestaopcionrespuestaFB._blockIndex] =
        respuestaopcionrespuestaFB._addedBlocks.retVal;
    return respuestaopcionrespuestaFB;
  }
}
// endregion RespuestaopcionrespuestaField

// region RespuestaopcionrespuestaFilterBuilder
class RespuestaopcionrespuestaFilterBuilder extends SearchCriteria {
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Opcionrespuesta _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;
  RespuestaopcionrespuestaFilterBuilder(Opcionrespuesta obj) {
    whereString = "";
    qparams = new QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = new AddedBlocks(new List<bool>(), new List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }

  RespuestaopcionrespuestaFilterBuilder get and {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " AND ";
    return this;
  }

  RespuestaopcionrespuestaFilterBuilder get or {
    if (parameters.length > 0)
      parameters[parameters.length - 1].wOperator = " OR ";
    return this;
  }

  RespuestaopcionrespuestaFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  RespuestaopcionrespuestaFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      DbParameter param = new DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  RespuestaopcionrespuestaFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  RespuestaopcionrespuestaFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  RespuestaopcionrespuestaFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  RespuestaopcionrespuestaFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add(argFields);
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s ");
        }
    }
    return this;
  }

  RespuestaopcionrespuestaFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.orderByList.add("$argFields desc ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.orderByList.add(" $s desc ");
        }
    }
    return this;
  }

  RespuestaopcionrespuestaFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String)
        this.groupByList.add(" $argFields ");
      else
        for (String s in argFields) {
          if (s != null && s != "") this.groupByList.add(" $s ");
        }
    }
    return this;
  }

  RespuestaopcionrespuestaField setField(RespuestaopcionrespuestaField field, String colName, DbType dbtype) {
    field = new RespuestaopcionrespuestaField(this);
    field.param = new DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  RespuestaopcionrespuestaField _id;
  RespuestaopcionrespuestaField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }
  RespuestaopcionrespuestaField _RespuestaOpcionMultipleId;
  RespuestaopcionrespuestaField get RespuestaOpcionMultipleId {
    _RespuestaOpcionMultipleId = setField(_RespuestaOpcionMultipleId, "RespuestaOpcionMultipleId", DbType.integer);
    return _RespuestaOpcionMultipleId;
  }
  RespuestaopcionrespuestaField _OpcionId;
  RespuestaopcionrespuestaField get OpcionId {
    _OpcionId = setField(_OpcionId, "OpcionId", DbType.integer);
    return _OpcionId;
  }
  RespuestaopcionrespuestaField _isDeleted;
  RespuestaopcionrespuestaField get isDeleted {
    _isDeleted = setField(_isDeleted, "isDeleted", DbType.bool);
    return _isDeleted;
  }


  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value);
          param.value = null;
        } else
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else
        whereString += param.whereString;
    }
    if (Opcionrespuesta._softDeleteActivated) {
      if (whereString != "")
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      else if (!_getIsDeleted) whereString = "ifnull(isDeleted,0)=0";
    }

    if (whereString != "") qparams.whereString = whereString;
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }


  /// <summary>
  /// Deletes List<Respuestaopcionrespuesta> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete() async {
    _buildParameters();
    var r= BoolResult();
    if(Opcionrespuesta._softDeleteActivated)
      r = await _obj._mnRespuestaopcionrespuesta.updateBatch(qparams,{"isDeleted":1});
    else
      r = await _obj._mnRespuestaopcionrespuesta.delete(qparams);
    return r;
  }
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print("SQFENTITIY: recover Respuestaopcionrespuesta batch invoked");            return _obj._mnRespuestaopcionrespuesta.updateBatch(qparams,{"isDeleted":0});
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnRespuestaopcionrespuesta.updateBatch(qparams, values);
  }

  /// This method always returns RespuestaopcionrespuestaObj if exist, otherwise returns null
  /// <returns>List<Respuestaopcionrespuesta></returns>
  void toSingle(VoidCallback respuestaopcionrespuesta(Opcionrespuesta o)) {
    _pagesize = 1;
    _buildParameters();
    var objFuture = _obj._mnRespuestaopcionrespuesta.toList(qparams);
    objFuture.then((data) {
      if (data.length > 0)
        respuestaopcionrespuesta(Opcionrespuesta.fromMap(data[0]));
      else
        respuestaopcionrespuesta(null);
    });
  }


  /// This method always returns int.
  /// <returns>int</returns>
  Future<BoolResult> toCount(VoidCallback respuestaopcionrespuestaCount (int c)) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    var respuestaopcionrespuestasFuture = await _obj._mnRespuestaopcionrespuesta.toList(qparams);
    int count = respuestaopcionrespuestasFuture[0]["CNT"];
    respuestaopcionrespuestaCount (count);
    return BoolResult(success:count>0, successMessage: count>0? "toCount(): $count items found":"", errorMessage: count>0?"": "toCount(): no items found");
  }

  /// This method always returns List<Respuestaopcionrespuesta>.
  /// <returns>List<Respuestaopcionrespuesta></returns>
  void toList(VoidCallback respuestaopcionrespuestaList (List<Opcionrespuesta> o)) async {

    _buildParameters();

    var respuestaopcionrespuestasFuture = _obj._mnRespuestaopcionrespuesta.toList(qparams);

    List<Opcionrespuesta> respuestaopcionrespuestasData = new List<Opcionrespuesta>();
    respuestaopcionrespuestasFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        respuestaopcionrespuestasData.add(Opcionrespuesta.fromMap(data[i]));
      }
      respuestaopcionrespuestaList (respuestaopcionrespuestasData);
      respuestaopcionrespuestasData = null;
    });
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(VoidCallback idList (List<int> o),
      [bool buildParameters=true]) async {
    if(buildParameters) _buildParameters();
    List<int> idData = new List<int>();
    qparams.selectColumns= ["id"];
    var idFuture = await _obj._mnRespuestaopcionrespuesta.toList(qparams);


    int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"]);
    }
    idList (idData);
    return idData;

  }

  void toListObject(VoidCallback listObject(List<dynamic> o)) async {
    _buildParameters();

    var objectFuture = _obj._mnRespuestaopcionrespuesta.toList(qparams);

    List<dynamic> objectsData = new List<dynamic>();
    objectFuture.then((data) {
      int count = data.length;
      for (int i = 0; i < count; i++) {
        objectsData.add(data[i]);
      }
      listObject(objectsData);
      objectsData = null;
    });


  }

}
// endregion RespuestaopcionrespuestaFilterBuilder




// region RespuestaopcionrespuestaFields
class RespuestaopcionrespuestaFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }
  static TableField _fRespuestaOpcionMultipleId;
  static TableField get RespuestaOpcionMultipleId {
    _fRespuestaOpcionMultipleId = SqlSyntax.setField(_fRespuestaOpcionMultipleId, "RespuestaOpcionMultipleId", DbType.integer);
    return _fRespuestaOpcionMultipleId;
  }
  static TableField _fOpcionId;
  static TableField get OpcionId {
    _fOpcionId = SqlSyntax.setField(_fOpcionId, "OpcionId", DbType.integer);
    return _fOpcionId;
  }
  static TableField _fIsDeleted;
  static TableField get isDeleted {
    _fIsDeleted = SqlSyntax.setField(_fIsDeleted, "isDeleted", DbType.integer);
    return _fIsDeleted;
  }

}
// endregion RespuestaopcionrespuestaFields

//region RespuestaopcionrespuestaManager
class RespuestaopcionrespuestaManager extends SqfEntityProvider {
  static String _tableName = "RespuestaOpcionRespuesta";
  static String _colId = "id";

  RespuestaopcionrespuestaManager():super(DbModel(),tableName: _tableName, colId: _colId);
}
//endregion RespuestaopcionrespuestaManager
